-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sinGen_sinf_or_cosf is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (31 downto 0);
    do_cos : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sinGen_sinf_or_cosf is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv49_0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_35 : BOOLEAN;
    signal hls_ref_4oPi_table_100_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal hls_ref_4oPi_table_100_V_ce0 : STD_LOGIC;
    signal hls_ref_4oPi_table_100_V_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal hls_sin_cos_K0_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_sin_cos_K0_V_ce0 : STD_LOGIC;
    signal hls_sin_cos_K0_V_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal hls_sin_cos_K1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_sin_cos_K1_V_ce0 : STD_LOGIC;
    signal hls_sin_cos_K1_V_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal hls_sin_cos_K2_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_sin_cos_K2_V_ce0 : STD_LOGIC;
    signal hls_sin_cos_K2_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_s_reg_993 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_fu_246_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_reg_999 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_1_fu_256_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_1006 : STD_LOGIC_VECTOR (22 downto 0);
    signal closepath_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_295_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_reg_1023 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_13_fu_299_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_13_reg_1028 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_93 : BOOLEAN;
    signal Med_V_reg_1033 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_15_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_1038 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_31_fu_352_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_31_reg_1044 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_106 : BOOLEAN;
    signal grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_done : STD_LOGIC;
    signal p_Val2_19_fu_369_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_19_reg_1051 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Result_i2_i_reg_1056 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_23_reg_1061 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_123 : BOOLEAN;
    signal tmp_22_reg_1066 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ex_V_fu_467_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_1071 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_reg_1077 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1083 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_1089 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_32_fu_516_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_32_reg_1095 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal sh_assign_fu_530_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_reg_1102 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_2_reg_1108 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_153 : BOOLEAN;
    signal tmp_1_reg_1113 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Ex_V_ret_fu_682_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Ex_V_ret_reg_1118 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Mx_V_ret_fu_689_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Mx_V_ret_reg_1123 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_fu_785_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1143 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_1148 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_reg_1153 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1158 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_180 : BOOLEAN;
    signal p_Val2_s_reg_1163 : STD_LOGIC_VECTOR (29 downto 0);
    signal hls_sin_cos_K1_V_load_reg_1168 : STD_LOGIC_VECTOR (22 downto 0);
    signal hls_sin_cos_K2_V_load_reg_1173 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_reg_1178 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_192 : BOOLEAN;
    signal tmp_7_reg_1183 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_1188 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_203 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_212 : BOOLEAN;
    signal p_0_reg_1203 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_223 : BOOLEAN;
    signal r_V_1_fu_907_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_reg_1208 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sinGen_my_to_float_31_1_s_fu_228_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal resultf_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_234 : BOOLEAN;
    signal grp_sinGen_my_to_float_31_1_s_fu_228_ap_done : STD_LOGIC;
    signal grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_start : STD_LOGIC;
    signal grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_idle : STD_LOGIC;
    signal grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_ready : STD_LOGIC;
    signal grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_a_V : STD_LOGIC_VECTOR (70 downto 0);
    signal grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_b_V : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_return : STD_LOGIC_VECTOR (94 downto 0);
    signal grp_sinGen_my_to_float_31_1_s_fu_228_ap_start : STD_LOGIC;
    signal grp_sinGen_my_to_float_31_1_s_fu_228_ap_idle : STD_LOGIC;
    signal grp_sinGen_my_to_float_31_1_s_fu_228_ap_ready : STD_LOGIC;
    signal grp_sinGen_my_to_float_31_1_s_fu_228_in_V : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_sinGen_my_to_float_31_1_s_fu_228_prescale : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_sinGen_my_to_float_31_1_s_fu_228_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_5_i_i_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_28_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_op_i_fu_266_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_V_fu_272_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_280_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_i_i_fu_307_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_V_3_fu_310_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal tmp_27_i_fu_342_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_14_fu_332_p4 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_20_fu_359_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_fu_363_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_i_fu_387_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_14_fu_399_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_15_fu_406_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_16_fu_416_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_fu_424_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Mx_zeros_V_fu_432_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_i_fu_436_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_22_fu_440_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal storemerge_i_fu_392_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_i_fu_463_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_demorgan_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_i_fu_513_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sh_i_cast_fu_521_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_33_i_fu_524_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_i_cast_fu_540_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_35_i_fu_546_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_34_i_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_i_cast8_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_i_cast_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_i_fu_555_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_0_i245_in_i_fu_561_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_598_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_646_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_625_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_fu_654_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_do_cos_fu_662_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_646_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_do_cos_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_40_fu_568_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal cos_basis_fu_654_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_674_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_19_fu_703_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_709_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_747_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_798_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_806_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal OP1_V_3_fu_803_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_3_fu_806_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_3_fu_806_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_fu_979_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Val2_6_fu_986_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_852_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_fu_859_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_863_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_fu_866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast_fu_872_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_887_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_887_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal rhs_V_fu_904_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_587 : BOOLEAN;
    signal p_Val2_25_fu_914_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_18_fu_917_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_937_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_20_fu_930_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_21_fu_941_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_v_fu_949_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_960_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_956_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_979_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_6_fu_986_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_887_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_887_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_5_fu_979_p10 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Val2_6_fu_986_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component sinGen_big_mult_v3small_71_24_17_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (70 downto 0);
        b_V : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (94 downto 0) );
    end component;


    component sinGen_my_to_float_31_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (30 downto 0);
        prescale : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sinGen_mux_8to1_sel3_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sinGen_mux_16to1_sel4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (0 downto 0);
        din17 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sinGen_mul_32s_31ns_62_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component sinGen_mul_mul_23s_17ns_40_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component sinGen_mul_mul_17ns_15s_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sinGen_sinf_or_cosf_hls_ref_4oPi_table_100_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component sinGen_sinf_or_cosf_hls_sin_cos_K0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component sinGen_sinf_or_cosf_hls_sin_cos_K1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component sinGen_sinf_or_cosf_hls_sin_cos_K2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    hls_ref_4oPi_table_100_V_U : component sinGen_sinf_or_cosf_hls_ref_4oPi_table_100_V
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_ref_4oPi_table_100_V_address0,
        ce0 => hls_ref_4oPi_table_100_V_ce0,
        q0 => hls_ref_4oPi_table_100_V_q0);

    hls_sin_cos_K0_V_U : component sinGen_sinf_or_cosf_hls_sin_cos_K0_V
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_sin_cos_K0_V_address0,
        ce0 => hls_sin_cos_K0_V_ce0,
        q0 => hls_sin_cos_K0_V_q0);

    hls_sin_cos_K1_V_U : component sinGen_sinf_or_cosf_hls_sin_cos_K1_V
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_sin_cos_K1_V_address0,
        ce0 => hls_sin_cos_K1_V_ce0,
        q0 => hls_sin_cos_K1_V_q0);

    hls_sin_cos_K2_V_U : component sinGen_sinf_or_cosf_hls_sin_cos_K2_V
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_sin_cos_K2_V_address0,
        ce0 => hls_sin_cos_K2_V_ce0,
        q0 => hls_sin_cos_K2_V_q0);

    grp_sinGen_big_mult_v3small_71_24_17_s_fu_222 : component sinGen_big_mult_v3small_71_24_17_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_start,
        ap_done => grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_done,
        ap_idle => grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_idle,
        ap_ready => grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_ready,
        a_V => grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_a_V,
        b_V => grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_b_V,
        ap_return => grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_return);

    grp_sinGen_my_to_float_31_1_s_fu_228 : component sinGen_my_to_float_31_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sinGen_my_to_float_31_1_s_fu_228_ap_start,
        ap_done => grp_sinGen_my_to_float_31_1_s_fu_228_ap_done,
        ap_idle => grp_sinGen_my_to_float_31_1_s_fu_228_ap_idle,
        ap_ready => grp_sinGen_my_to_float_31_1_s_fu_228_ap_ready,
        in_V => grp_sinGen_my_to_float_31_1_s_fu_228_in_V,
        prescale => grp_sinGen_my_to_float_31_1_s_fu_228_prescale,
        ap_return => grp_sinGen_my_to_float_31_1_s_fu_228_ap_return);

    sinGen_mux_8to1_sel3_1_1_U6 : component sinGen_mux_8to1_sel3_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_0,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => p_Val2_31_reg_1044,
        dout => tmp_fu_598_p10);

    sinGen_mux_8to1_sel3_1_1_U7 : component sinGen_mux_8to1_sel3_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_0,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => p_Val2_31_reg_1044,
        dout => tmp_s_fu_625_p10);

    sinGen_mux_16to1_sel4_1_1_U8 : component sinGen_mux_16to1_sel4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => ap_const_lv1_0,
        din17 => p_Result_19_fu_703_p3,
        dout => tmp_11_fu_709_p18);

    sinGen_mux_16to1_sel4_1_1_U9 : component sinGen_mux_16to1_sel4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_0,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_1,
        din15 => ap_const_lv1_0,
        din16 => ap_const_lv1_0,
        din17 => p_Result_19_fu_703_p3,
        dout => tmp_12_fu_747_p18);

    sinGen_mul_32s_31ns_62_6_U10 : component sinGen_mul_32s_31ns_62_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_V_reg_1188,
        din1 => grp_fu_887_p1,
        ce => grp_fu_887_ce,
        dout => grp_fu_887_p2);

    sinGen_mul_mul_23s_17ns_40_1_U11 : component sinGen_mul_mul_23s_17ns_40_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 17,
        dout_WIDTH => 40)
    port map (
        din0 => hls_sin_cos_K1_V_load_reg_1168,
        din1 => p_Val2_5_fu_979_p1,
        dout => p_Val2_5_fu_979_p2);

    sinGen_mul_mul_17ns_15s_32_1_U12 : component sinGen_mul_mul_17ns_15s_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        din0 => p_Val2_6_fu_986_p0,
        din1 => hls_sin_cos_K2_V_load_reg_1173,
        dout => p_Val2_6_fu_986_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_start_ap_start_reg assign process. --
    grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
                    grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_ready)) then 
                    grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_sinGen_my_to_float_31_1_s_fu_228_ap_start_ap_start_reg assign process. --
    grp_sinGen_my_to_float_31_1_s_fu_228_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sinGen_my_to_float_31_1_s_fu_228_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                    grp_sinGen_my_to_float_31_1_s_fu_228_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sinGen_my_to_float_31_1_s_fu_228_ap_ready)) then 
                    grp_sinGen_my_to_float_31_1_s_fu_228_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                Ex_V_reg_1071 <= Ex_V_fu_467_p2;
                isNeg_reg_1077 <= Ex_V_fu_467_p2(7 downto 7);
                or_cond_reg_1083 <= or_cond_fu_486_p2;
                p_Val2_23_reg_1061 <= p_Val2_22_fu_440_p2(48 downto 18);
                sel_tmp6_reg_1089 <= sel_tmp6_fu_507_p2;
                tmp_22_reg_1066 <= p_Val2_22_fu_440_p2(17 downto 17);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                Med_V_reg_1033 <= r_V_3_fu_310_p2(99 downto 29);
                    p_Result_13_reg_1028(22 downto 0) <= p_Result_13_fu_299_p3(22 downto 0);
                tmp_15_reg_1038 <= tmp_15_fu_327_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                closepath_reg_1012 <= closepath_fu_260_p2;
                loc_V_1_reg_1006 <= loc_V_1_fu_256_p1;
                loc_V_reg_999 <= p_Val2_28_fu_234_p1(30 downto 23);
                p_Result_s_reg_993 <= p_Val2_28_fu_234_p1(31 downto 31);
                tmp_19_reg_1023 <= tmp_19_fu_295_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                hls_sin_cos_K1_V_load_reg_1168 <= hls_sin_cos_K1_V_q0;
                hls_sin_cos_K2_V_load_reg_1173 <= hls_sin_cos_K2_V_q0;
                p_Val2_s_reg_1163 <= hls_sin_cos_K0_V_q0;
                tmp_3_reg_1158 <= p_Val2_3_fu_806_p2(17 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                p_0_reg_1203 <= grp_fu_887_p2(61 downto 31);
                r_V_1_reg_1208 <= r_V_1_fu_907_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                p_Ex_V_ret_reg_1118 <= p_Ex_V_ret_fu_682_p3;
                p_Mx_V_ret_reg_1123 <= p_Mx_V_ret_fu_689_p3;
                p_Val2_2_reg_1108 <= p_Val2_0_i245_in_i_fu_561_p3(23 downto 7);
                sel_tmp1_reg_1148 <= sel_tmp1_fu_793_p2;
                sel_tmp3_reg_1153 <= sel_tmp3_fu_798_p2;
                tmp_13_reg_1143 <= tmp_13_fu_785_p3;
                tmp_1_reg_1113 <= p_Val2_0_i245_in_i_fu_561_p3(23 downto 15);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_done)))) then
                p_Result_i2_i_reg_1056 <= p_Val2_19_fu_369_p3(48 downto 31);
                p_Val2_19_reg_1051 <= p_Val2_19_fu_369_p3;
                p_Val2_31_reg_1044 <= p_Val2_31_fu_352_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                p_Val2_32_reg_1095 <= p_Val2_32_fu_516_p2;
                sh_assign_reg_1102 <= sh_assign_fu_530_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                r_V_reg_1188 <= r_V_fu_875_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_logic_0 = grp_sinGen_my_to_float_31_1_s_fu_228_ap_done)))) then
                resultf_reg_1213 <= grp_sinGen_my_to_float_31_1_s_fu_228_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_5_reg_1178 <= p_Val2_5_fu_979_p2(39 downto 16);
                tmp_7_reg_1183 <= p_Val2_6_fu_986_p2(31 downto 16);
            end if;
        end if;
    end process;
    p_Result_13_reg_1028(23) <= '1';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_done, grp_sinGen_my_to_float_31_1_s_fu_228_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_done))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_const_logic_0 = grp_sinGen_my_to_float_31_1_s_fu_228_ap_done))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Ex_V_fu_467_p2 <= std_logic_vector(unsigned(storemerge_i_fu_392_p3) - unsigned(tmp_31_i_fu_463_p1));
    Mx_zeros_V_fu_432_p1 <= val_assign_fu_424_p3(5 - 1 downto 0);
    OP1_V_3_fu_803_p1 <= std_logic_vector(resize(unsigned(tmp_1_reg_1113),18));
    addr_V_fu_272_p3 <= 
        ap_const_lv8_3F when (closepath_fu_260_p2(0) = '1') else 
        p_op_i_fu_266_p2;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st17_fsm_16)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        sel_tmp4_fu_960_p3 when (tmp_16_fu_967_p2(0) = '1') else 
        sel_tmp2_fu_956_p1;

    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_106 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_123 assign process. --
    ap_sig_bdd_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_123 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_153 assign process. --
    ap_sig_bdd_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_153 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_180 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_192 assign process. --
    ap_sig_bdd_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_192 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_203 assign process. --
    ap_sig_bdd_203_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_203 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_212 assign process. --
    ap_sig_bdd_212_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_212 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_223 assign process. --
    ap_sig_bdd_223_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_223 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_234 assign process. --
    ap_sig_bdd_234_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_234 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_35 assign process. --
    ap_sig_bdd_35_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_35 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_587 assign process. --
    ap_sig_bdd_587_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_587 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_93 assign process. --
    ap_sig_bdd_93_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_93 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_212)
    begin
        if (ap_sig_bdd_212) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_223)
    begin
        if (ap_sig_bdd_223) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_234)
    begin
        if (ap_sig_bdd_234) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_587)
    begin
        if (ap_sig_bdd_587) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_35)
    begin
        if (ap_sig_bdd_35) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_93)
    begin
        if (ap_sig_bdd_93) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_106)
    begin
        if (ap_sig_bdd_106) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_123)
    begin
        if (ap_sig_bdd_123) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_153)
    begin
        if (ap_sig_bdd_153) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_180)
    begin
        if (ap_sig_bdd_180) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_192)
    begin
        if (ap_sig_bdd_192) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_203)
    begin
        if (ap_sig_bdd_203) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    closepath_fu_260_p2 <= "1" when (unsigned(loc_V_fu_246_p4) < unsigned(ap_const_lv8_7E)) else "0";
    cos_basis_fu_654_p0 <= (0=>do_cos, others=>'-');
    cos_basis_fu_654_p3 <= 
        tmp_4_fu_619_p2 when (cos_basis_fu_654_p0(0) = '1') else 
        tmp_s_fu_625_p10;
    grp_fu_887_ce <= ap_const_logic_1;
    grp_fu_887_p1 <= grp_fu_887_p10(31 - 1 downto 0);
    grp_fu_887_p10 <= std_logic_vector(resize(unsigned(p_Mx_V_ret_reg_1123),62));
    grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_a_V <= Med_V_reg_1033;
    grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_start <= grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_start_ap_start_reg;
    grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_b_V <= p_Result_13_reg_1028;
    grp_sinGen_my_to_float_31_1_s_fu_228_ap_start <= grp_sinGen_my_to_float_31_1_s_fu_228_ap_start_ap_start_reg;
    grp_sinGen_my_to_float_31_1_s_fu_228_in_V <= p_0_reg_1203;
    grp_sinGen_my_to_float_31_1_s_fu_228_prescale <= r_V_1_reg_1208;
    hls_ref_4oPi_table_100_V_address0 <= tmp_5_i_i_fu_290_p1(4 - 1 downto 0);

    -- hls_ref_4oPi_table_100_V_ce0 assign process. --
    hls_ref_4oPi_table_100_V_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            hls_ref_4oPi_table_100_V_ce0 <= ap_const_logic_1;
        else 
            hls_ref_4oPi_table_100_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_sin_cos_K0_V_address0 <= tmp_8_fu_696_p1(8 - 1 downto 0);

    -- hls_sin_cos_K0_V_ce0 assign process. --
    hls_sin_cos_K0_V_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            hls_sin_cos_K0_V_ce0 <= ap_const_logic_1;
        else 
            hls_sin_cos_K0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_sin_cos_K1_V_address0 <= tmp_8_fu_696_p1(8 - 1 downto 0);

    -- hls_sin_cos_K1_V_ce0 assign process. --
    hls_sin_cos_K1_V_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            hls_sin_cos_K1_V_ce0 <= ap_const_logic_1;
        else 
            hls_sin_cos_K1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_sin_cos_K2_V_address0 <= tmp_8_fu_696_p1(8 - 1 downto 0);

    -- hls_sin_cos_K2_V_ce0 assign process. --
    hls_sin_cos_K2_V_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            hls_sin_cos_K2_V_ce0 <= ap_const_logic_1;
        else 
            hls_sin_cos_K2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    loc_V_1_fu_256_p1 <= p_Val2_28_fu_234_p1(23 - 1 downto 0);
    loc_V_fu_246_p4 <= p_Val2_28_fu_234_p1(30 downto 23);
    not_do_cos_fu_662_p0 <= (0=>do_cos, others=>'-');
    not_do_cos_fu_662_p2 <= (not_do_cos_fu_662_p0 xor ap_const_lv1_1);
    or_cond_fu_486_p2 <= (tmp_14_fu_481_p2 and tmp_15_reg_1038);
    p_Ex_V_ret_fu_682_p3 <= 
        ap_const_lv8_0 when (cos_basis_fu_654_p3(0) = '1') else 
        Ex_V_reg_1071;
    p_Mx_V_ret_fu_689_p3 <= 
        ap_const_lv31_7FFFFFFF when (cos_basis_fu_654_p3(0) = '1') else 
        p_Val2_32_reg_1095;
    p_Result_12_fu_925_p2 <= (tmp_13_reg_1143 or p_Result_18_fu_917_p3);
    p_Result_13_fu_299_p3 <= (ap_const_lv1_1 & loc_V_1_reg_1006);
    p_Result_14_fu_399_p3 <= (p_Result_i2_i_reg_1056 & ap_const_lv1_1);
    
    p_Result_15_fu_406_p4_proc : process(p_Result_14_fu_399_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(19+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(19+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(19 - 1 downto 0);
    variable p_Result_15_fu_406_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(19 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(19 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(19 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_12(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_14_fu_399_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(19-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(19-1-unsigned(ap_const_lv32_12(5-1 downto 0)));
            for p_Result_15_fu_406_p4_i in 0 to 19-1 loop
                v0_cpy(p_Result_15_fu_406_p4_i) := p_Result_14_fu_399_p3(19-1-p_Result_15_fu_406_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(19-1 downto 0)))));
        res_mask := res_mask(19-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_15_fu_406_p4 <= resvalue(19-1 downto 0);
    end process;

    p_Result_16_fu_416_p3 <= (ap_const_lv13_1FFF & p_Result_15_fu_406_p4);
    p_Result_17_fu_674_p3 <= (sin_basis_fu_668_p2 & p_Result_s_40_fu_568_p4);
    p_Result_18_fu_917_p3 <= p_Val2_25_fu_914_p1(31 downto 31);
    p_Result_19_fu_703_p3 <= (p_Result_s_reg_993 & p_Val2_31_reg_1044);
    p_Result_20_fu_930_p3 <= (p_Result_s_reg_993 & ap_const_lv31_0);
    p_Result_21_fu_941_p3 <= (p_Result_12_fu_925_p2 & tmp_25_fu_937_p1);
    p_Result_s_40_fu_568_p4 <= p_Val2_0_i245_in_i_fu_561_p3(30 downto 24);
    p_Val2_0_i245_in_i_fu_561_p3 <= 
        tmp_35_i_cast_fu_551_p1 when (isNeg_reg_1077(0) = '1') else 
        tmp_37_i_fu_555_p2;
    p_Val2_14_fu_332_p4 <= grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_return(67 downto 19);
    p_Val2_19_fu_369_p3 <= 
        p_Val2_i_fu_363_p2 when (tmp_20_fu_359_p1(0) = '1') else 
        p_Val2_14_fu_332_p4;
    p_Val2_22_fu_440_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_19_reg_1051),to_integer(unsigned('0' & tmp_28_i_fu_436_p1(31-1 downto 0)))));
    p_Val2_25_fu_914_p1 <= resultf_reg_1213;
    p_Val2_28_fu_234_p1 <= t_in;
    p_Val2_31_fu_352_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1012(0) = '1') else 
        tmp_27_i_fu_342_p4;
    p_Val2_32_fu_516_p2 <= std_logic_vector(unsigned(p_Val2_23_reg_1061) + unsigned(tmp_30_i_fu_513_p1));
    p_Val2_3_fu_806_p0 <= OP1_V_3_fu_803_p1(9 - 1 downto 0);
    p_Val2_3_fu_806_p1 <= OP1_V_3_fu_803_p1(9 - 1 downto 0);
    p_Val2_3_fu_806_p2 <= std_logic_vector(resize(unsigned(p_Val2_3_fu_806_p0) * unsigned(p_Val2_3_fu_806_p1), 18));
    p_Val2_5_fu_979_p1 <= p_Val2_5_fu_979_p10(17 - 1 downto 0);
    p_Val2_5_fu_979_p10 <= std_logic_vector(resize(unsigned(p_Val2_2_reg_1108),40));
    p_Val2_6_fu_986_p0 <= p_Val2_6_fu_986_p00(17 - 1 downto 0);
    p_Val2_6_fu_986_p00 <= std_logic_vector(resize(unsigned(tmp_3_reg_1158),32));
    p_Val2_7_fu_852_p3 <= (p_Val2_s_reg_1163 & ap_const_lv1_0);
    p_Val2_8_fu_866_p2 <= std_logic_vector(signed(tmp_9_fu_859_p1) + signed(tmp_10_fu_863_p1));
    p_Val2_i_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv49_0) - unsigned(p_Val2_14_fu_332_p4));
    p_i_fu_387_p2 <= std_logic_vector(signed(ap_const_lv8_83) + signed(loc_V_reg_999));
    p_op_i_fu_266_p2 <= std_logic_vector(signed(ap_const_lv8_C2) + signed(loc_V_fu_246_p4));
    r_V_1_fu_907_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(rhs_V_fu_904_p1));
    r_V_3_fu_310_p2 <= std_logic_vector(shift_left(unsigned(hls_ref_4oPi_table_100_V_q0),to_integer(unsigned('0' & tmp_7_i_i_fu_307_p1(31-1 downto 0)))));
    r_V_fu_875_p2 <= std_logic_vector(unsigned(p_Val2_8_fu_866_p2) + unsigned(tmp_18_cast_fu_872_p1));
        rhs_V_fu_904_p1 <= std_logic_vector(resize(signed(p_Ex_V_ret_reg_1118),9));

    sel_tmp1_fu_793_p2 <= (or_cond_reg_1083 and not_do_cos_fu_662_p2);
    sel_tmp2_fu_956_p1 <= sel_tmp2_v_fu_949_p3;
    sel_tmp2_v_fu_949_p3 <= 
        p_Result_20_fu_930_p3 when (sel_tmp1_reg_1148(0) = '1') else 
        p_Result_21_fu_941_p3;
    sel_tmp3_fu_798_p1 <= (0=>do_cos, others=>'-');
    sel_tmp3_fu_798_p2 <= (or_cond_reg_1083 and sel_tmp3_fu_798_p1);
    sel_tmp4_fu_960_p3 <= 
        ap_const_lv32_7FFFFFFF when (sel_tmp6_reg_1089(0) = '1') else 
        ap_const_lv32_3F800000;
    sel_tmp5_demorgan_fu_496_p2 <= (tmp_14_fu_481_p2 and tmp_15_reg_1038);
    sel_tmp5_fu_501_p2 <= (sel_tmp5_demorgan_fu_496_p2 xor ap_const_lv1_1);
    sel_tmp6_fu_507_p2 <= (tmp_i_fu_491_p2 and sel_tmp5_fu_501_p2);
        sh_assign_1_i_cast8_fu_537_p1 <= std_logic_vector(resize(signed(sh_assign_reg_1102),32));

        sh_assign_1_i_cast_fu_540_p1 <= std_logic_vector(resize(signed(sh_assign_reg_1102),31));

    sh_assign_fu_530_p3 <= 
        tmp_33_i_fu_524_p2 when (isNeg_reg_1077(0) = '1') else 
        sh_i_cast_fu_521_p1;
        sh_i_cast_fu_521_p1 <= std_logic_vector(resize(signed(Ex_V_reg_1071),9));

    sin_basis_fu_668_p2 <= (tmp_6_fu_646_p3 xor not_do_cos_fu_662_p2);
    storemerge_i_fu_392_p3 <= 
        p_i_fu_387_p2 when (closepath_reg_1012(0) = '1') else 
        ap_const_lv8_0;
        tmp_10_fu_863_p1 <= std_logic_vector(resize(signed(tmp_5_reg_1178),32));

    tmp_13_fu_785_p3 <= 
        tmp_11_fu_709_p18 when (cos_basis_fu_654_p3(0) = '1') else 
        tmp_12_fu_747_p18;
    tmp_14_fu_481_p2 <= "1" when (loc_V_reg_999 = ap_const_lv8_0) else "0";
    tmp_15_fu_327_p2 <= "1" when (loc_V_1_reg_1006 = ap_const_lv23_0) else "0";
    tmp_16_fu_967_p2 <= (sel_tmp6_reg_1089 or sel_tmp3_reg_1153);
        tmp_18_cast_fu_872_p1 <= std_logic_vector(resize(signed(tmp_7_reg_1183),32));

    tmp_19_fu_295_p1 <= addr_V_fu_272_p3(4 - 1 downto 0);
    tmp_20_fu_359_p1 <= p_Val2_31_fu_352_p3(1 - 1 downto 0);
    tmp_25_fu_937_p1 <= p_Val2_25_fu_914_p1(31 - 1 downto 0);
    tmp_27_i_fu_342_p4 <= grp_sinGen_big_mult_v3small_71_24_17_s_fu_222_ap_return(70 downto 68);
    tmp_28_i_fu_436_p1 <= std_logic_vector(resize(unsigned(Mx_zeros_V_fu_432_p1),49));
    tmp_2_fu_280_p4 <= addr_V_fu_272_p3(7 downto 4);
    tmp_30_i_fu_513_p1 <= std_logic_vector(resize(unsigned(tmp_22_reg_1066),31));
    tmp_31_i_fu_463_p1 <= std_logic_vector(resize(unsigned(Mx_zeros_V_fu_432_p1),8));
    tmp_33_i_fu_524_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_i_cast_fu_521_p1));
    tmp_34_i_fu_543_p1 <= std_logic_vector(resize(unsigned(p_Val2_32_reg_1095),32));
    tmp_35_i_cast_fu_551_p1 <= std_logic_vector(resize(unsigned(tmp_35_i_fu_546_p2),32));
    tmp_35_i_fu_546_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_32_reg_1095),to_integer(unsigned('0' & sh_assign_1_i_cast_fu_540_p1(31-1 downto 0)))));
    tmp_37_i_fu_555_p2 <= std_logic_vector(shift_left(unsigned(tmp_34_i_fu_543_p1),to_integer(unsigned('0' & sh_assign_1_i_cast8_fu_537_p1(31-1 downto 0)))));
    tmp_4_fu_619_p2 <= (tmp_fu_598_p10 xor ap_const_lv1_1);
    tmp_5_i_i_fu_290_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_280_p4),64));
    tmp_6_fu_646_p0 <= (0=>do_cos, others=>'-');
    tmp_6_fu_646_p3 <= 
        tmp_fu_598_p10 when (tmp_6_fu_646_p0(0) = '1') else 
        tmp_s_fu_625_p10;
    tmp_7_i_i_fu_307_p1 <= std_logic_vector(resize(unsigned(tmp_19_reg_1023),100));
    tmp_8_fu_696_p1 <= std_logic_vector(resize(unsigned(p_Result_17_fu_674_p3),64));
        tmp_9_fu_859_p1 <= std_logic_vector(resize(signed(p_Val2_7_fu_852_p3),32));

    tmp_i_fu_491_p2 <= "1" when (loc_V_reg_999 = ap_const_lv8_FF) else "0";
    
    val_assign_fu_424_p3_proc : process(p_Result_16_fu_416_p3)
    begin
        val_assign_fu_424_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_16_fu_416_p3(i) = '1' then
                val_assign_fu_424_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

end behav;
