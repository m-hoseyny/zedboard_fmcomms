-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sinGen is
generic (
    C_S_AXI_CRTLS_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_CRTLS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CRTLS_AWVALID : IN STD_LOGIC;
    s_axi_CRTLS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTLS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTLS_WVALID : IN STD_LOGIC;
    s_axi_CRTLS_WREADY : OUT STD_LOGIC;
    s_axi_CRTLS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_DATA_WIDTH-1 downto 0);
    s_axi_CRTLS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTLS_ARVALID : IN STD_LOGIC;
    s_axi_CRTLS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTLS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTLS_RVALID : OUT STD_LOGIC;
    s_axi_CRTLS_RREADY : IN STD_LOGIC;
    s_axi_CRTLS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTLS_DATA_WIDTH-1 downto 0);
    s_axi_CRTLS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTLS_BVALID : OUT STD_LOGIC;
    s_axi_CRTLS_BREADY : IN STD_LOGIC;
    s_axi_CRTLS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sinGen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sinGen,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=17177,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=41,HLS_SYN_FF=8806,HLS_SYN_LUT=19263}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (71 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (71 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (71 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (71 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (71 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (71 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (71 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (71 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (71 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (71 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (71 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (71 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_40800000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000100000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv64_40091EB851EB851F : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001001000111101011100001010001111010111000010100011111";
    constant ap_const_lv64_3F80000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_90 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal Fs : STD_LOGIC_VECTOR (31 downto 0);
    signal cycle : STD_LOGIC_VECTOR (31 downto 0);
    signal amp : STD_LOGIC_VECTOR (31 downto 0);
    signal binOffset : STD_LOGIC_VECTOR (31 downto 0);
    signal outIQ_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal outIQ_ce0 : STD_LOGIC;
    signal outIQ_we0 : STD_LOGIC;
    signal outIQ_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sinGen_CRTLS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_286 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_150 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_157 : BOOLEAN;
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_292 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_167 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal binOffset_read_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal amp_read_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal cycle5_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_cast4_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_193 : BOOLEAN;
    signal idx_1_fu_313_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal idx_1_reg_625 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_640 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_212 : BOOLEAN;
    signal t_in_assign_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_in_assign_reg_645 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal grp_sinGen_sinf_or_cosf_fu_200_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_230 : BOOLEAN;
    signal grp_sinGen_sinf_or_cosf_fu_200_ap_done : STD_LOGIC;
    signal grp_sinGen_sinf_or_cosf_fu_215_ap_done : STD_LOGIC;
    signal grp_sinGen_sinf_or_cosf_fu_215_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i1_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sinGen_max_fu_230_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal maxI_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_248 : BOOLEAN;
    signal grp_sinGen_max_fu_230_ap_done : STD_LOGIC;
    signal grp_sinGen_max_fu_235_ap_done : STD_LOGIC;
    signal grp_sinGen_max_fu_235_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal maxQ_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_41_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_339_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_686 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st43_fsm_42 : STD_LOGIC;
    signal ap_sig_bdd_270 : BOOLEAN;
    signal exitcond_i_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rawI_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rawI_load_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_286 : BOOLEAN;
    signal rawQ_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rawQ_load_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_i_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st60_fsm_59 : STD_LOGIC;
    signal ap_sig_bdd_297 : BOOLEAN;
    signal grp_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_i_reg_716 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_i_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st64_fsm_63 : STD_LOGIC;
    signal ap_sig_bdd_308 : BOOLEAN;
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_i_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_reg_731 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st69_fsm_68 : STD_LOGIC;
    signal ap_sig_bdd_319 : BOOLEAN;
    signal loc_V_2_fu_365_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_2_reg_737 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_3_reg_742 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_4_fu_383_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_4_reg_748 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_396_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_753 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st70_fsm_69 : STD_LOGIC;
    signal ap_sig_bdd_334 : BOOLEAN;
    signal sh_assign_1_fu_413_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_reg_758 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_764 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st71_fsm_70 : STD_LOGIC;
    signal ap_sig_bdd_345 : BOOLEAN;
    signal isNeg_1_fu_504_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_3_fu_521_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_reg_774 : STD_LOGIC_VECTOR (8 downto 0);
    signal rawI_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal rawI_ce0 : STD_LOGIC;
    signal rawI_we0 : STD_LOGIC;
    signal rawI_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rawQ_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal rawQ_ce0 : STD_LOGIC;
    signal rawQ_we0 : STD_LOGIC;
    signal rawQ_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sinGen_sinf_or_cosf_fu_200_ap_start : STD_LOGIC;
    signal grp_sinGen_sinf_or_cosf_fu_200_ap_idle : STD_LOGIC;
    signal grp_sinGen_sinf_or_cosf_fu_200_ap_ready : STD_LOGIC;
    signal grp_sinGen_sinf_or_cosf_fu_200_t_in : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sinGen_sinf_or_cosf_fu_200_do_cos : STD_LOGIC;
    signal grp_sinGen_sinf_or_cosf_fu_215_ap_start : STD_LOGIC;
    signal grp_sinGen_sinf_or_cosf_fu_215_ap_idle : STD_LOGIC;
    signal grp_sinGen_sinf_or_cosf_fu_215_ap_ready : STD_LOGIC;
    signal grp_sinGen_sinf_or_cosf_fu_215_t_in : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sinGen_sinf_or_cosf_fu_215_do_cos : STD_LOGIC;
    signal grp_sinGen_max_fu_230_ap_start : STD_LOGIC;
    signal grp_sinGen_max_fu_230_ap_idle : STD_LOGIC;
    signal grp_sinGen_max_fu_230_ap_ready : STD_LOGIC;
    signal grp_sinGen_max_fu_230_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sinGen_max_fu_230_data_ce0 : STD_LOGIC;
    signal grp_sinGen_max_fu_230_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sinGen_max_fu_235_ap_start : STD_LOGIC;
    signal grp_sinGen_max_fu_235_ap_idle : STD_LOGIC;
    signal grp_sinGen_max_fu_235_ap_ready : STD_LOGIC;
    signal grp_sinGen_max_fu_235_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sinGen_max_fu_235_data_ce0 : STD_LOGIC;
    signal grp_sinGen_max_fu_235_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_reg_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_404 : BOOLEAN;
    signal i_i_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st72_fsm_71 : STD_LOGIC;
    signal ap_sig_bdd_413 : BOOLEAN;
    signal grp_sinGen_sinf_or_cosf_fu_200_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_422 : BOOLEAN;
    signal grp_sinGen_sinf_or_cosf_fu_215_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_sinGen_max_fu_230_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_477 : BOOLEAN;
    signal grp_sinGen_max_fu_235_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_8_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_i_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_i_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_i_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_fu_476_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_584_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_514 : BOOLEAN;
    signal ap_sig_cseq_ST_st61_fsm_60 : STD_LOGIC;
    signal ap_sig_bdd_521 : BOOLEAN;
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_271_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_548 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_555 : BOOLEAN;
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_562 : BOOLEAN;
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_36_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i_cast2_fu_387_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_390_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_56_i_i_i_fu_404_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_i_i_i_cast_fu_409_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_s_fu_421_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sh_assign_3_i_cast_fu_432_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_i_cast_cast_fu_435_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_i_fu_428_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_57_i_i_i_fu_438_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_58_i_i_i_fu_442_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_28_fu_454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_i_i_i_fu_448_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_6_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_466_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i1_i_cast1_fu_495_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_fu_498_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_56_i_i1_i_fu_512_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_i_i1_i_cast_fu_517_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_25_fu_529_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sh_assign_5_i_cast_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_5_i_cast_cast_fu_543_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i1_i_fu_536_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_57_i_i1_i_fu_546_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_58_i_i1_i_fu_550_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_32_fu_562_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_i_i1_i_fu_556_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_13_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_574_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_i_fu_592_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_240_ce : STD_LOGIC;
    signal grp_fu_244_ce : STD_LOGIC;
    signal grp_fu_248_ce : STD_LOGIC;
    signal grp_fu_254_ce : STD_LOGIC;
    signal grp_fu_260_ce : STD_LOGIC;
    signal grp_fu_264_ce : STD_LOGIC;
    signal grp_fu_268_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_718 : BOOLEAN;
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_726 : BOOLEAN;
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_bdd_734 : BOOLEAN;
    signal grp_fu_271_ce : STD_LOGIC;
    signal grp_fu_277_ce : STD_LOGIC;
    signal grp_fu_283_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (71 downto 0);

    component sinGen_sinf_or_cosf IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (31 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sinGen_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sinGen_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sinGen_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sinGen_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sinGen_sitofp_64ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sinGen_fptrunc_64ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sinGen_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sinGen_sitodp_64ns_64_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sinGen_rawI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sinGen_CRTLS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        Fs : OUT STD_LOGIC_VECTOR (31 downto 0);
        cycle : OUT STD_LOGIC_VECTOR (31 downto 0);
        amp : OUT STD_LOGIC_VECTOR (31 downto 0);
        binOffset : OUT STD_LOGIC_VECTOR (31 downto 0);
        outIQ_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        outIQ_ce0 : IN STD_LOGIC;
        outIQ_we0 : IN STD_LOGIC;
        outIQ_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sinGen_CRTLS_s_axi_U : component sinGen_CRTLS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTLS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTLS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTLS_AWVALID,
        AWREADY => s_axi_CRTLS_AWREADY,
        AWADDR => s_axi_CRTLS_AWADDR,
        WVALID => s_axi_CRTLS_WVALID,
        WREADY => s_axi_CRTLS_WREADY,
        WDATA => s_axi_CRTLS_WDATA,
        WSTRB => s_axi_CRTLS_WSTRB,
        ARVALID => s_axi_CRTLS_ARVALID,
        ARREADY => s_axi_CRTLS_ARREADY,
        ARADDR => s_axi_CRTLS_ARADDR,
        RVALID => s_axi_CRTLS_RVALID,
        RREADY => s_axi_CRTLS_RREADY,
        RDATA => s_axi_CRTLS_RDATA,
        RRESP => s_axi_CRTLS_RRESP,
        BVALID => s_axi_CRTLS_BVALID,
        BREADY => s_axi_CRTLS_BREADY,
        BRESP => s_axi_CRTLS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => sinGen_CRTLS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        Fs => Fs,
        cycle => cycle,
        amp => amp,
        binOffset => binOffset,
        outIQ_address0 => outIQ_address0,
        outIQ_ce0 => outIQ_ce0,
        outIQ_we0 => outIQ_we0,
        outIQ_d0 => outIQ_d0);

    rawI_U : component sinGen_rawI
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rawI_address0,
        ce0 => rawI_ce0,
        we0 => rawI_we0,
        d0 => rawI_d0,
        q0 => rawI_q0);

    rawQ_U : component sinGen_rawI
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rawQ_address0,
        ce0 => rawQ_ce0,
        we0 => rawQ_we0,
        d0 => rawQ_d0,
        q0 => rawQ_q0);

    grp_sinGen_sinf_or_cosf_fu_200 : component sinGen_sinf_or_cosf
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sinGen_sinf_or_cosf_fu_200_ap_start,
        ap_done => grp_sinGen_sinf_or_cosf_fu_200_ap_done,
        ap_idle => grp_sinGen_sinf_or_cosf_fu_200_ap_idle,
        ap_ready => grp_sinGen_sinf_or_cosf_fu_200_ap_ready,
        t_in => grp_sinGen_sinf_or_cosf_fu_200_t_in,
        do_cos => grp_sinGen_sinf_or_cosf_fu_200_do_cos,
        ap_return => grp_sinGen_sinf_or_cosf_fu_200_ap_return);

    grp_sinGen_sinf_or_cosf_fu_215 : component sinGen_sinf_or_cosf
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sinGen_sinf_or_cosf_fu_215_ap_start,
        ap_done => grp_sinGen_sinf_or_cosf_fu_215_ap_done,
        ap_idle => grp_sinGen_sinf_or_cosf_fu_215_ap_idle,
        ap_ready => grp_sinGen_sinf_or_cosf_fu_215_ap_ready,
        t_in => grp_sinGen_sinf_or_cosf_fu_215_t_in,
        do_cos => grp_sinGen_sinf_or_cosf_fu_215_do_cos,
        ap_return => grp_sinGen_sinf_or_cosf_fu_215_ap_return);

    grp_sinGen_max_fu_230 : component sinGen_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sinGen_max_fu_230_ap_start,
        ap_done => grp_sinGen_max_fu_230_ap_done,
        ap_idle => grp_sinGen_max_fu_230_ap_idle,
        ap_ready => grp_sinGen_max_fu_230_ap_ready,
        data_address0 => grp_sinGen_max_fu_230_data_address0,
        data_ce0 => grp_sinGen_max_fu_230_data_ce0,
        data_q0 => grp_sinGen_max_fu_230_data_q0,
        ap_return => grp_sinGen_max_fu_230_ap_return);

    grp_sinGen_max_fu_235 : component sinGen_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sinGen_max_fu_235_ap_start,
        ap_done => grp_sinGen_max_fu_235_ap_done,
        ap_idle => grp_sinGen_max_fu_235_ap_idle,
        ap_ready => grp_sinGen_max_fu_235_ap_ready,
        data_address0 => grp_sinGen_max_fu_235_data_address0,
        data_ce0 => grp_sinGen_max_fu_235_data_ce0,
        data_q0 => grp_sinGen_max_fu_235_data_q0,
        ap_return => grp_sinGen_max_fu_235_ap_return);

    sinGen_fadd_32ns_32ns_32_5_full_dsp_U22 : component sinGen_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_61_i_reg_721,
        din1 => tmp_i_41_reg_677,
        ce => grp_fu_240_ce,
        dout => grp_fu_240_p2);

    sinGen_fadd_32ns_32ns_32_5_full_dsp_U23 : component sinGen_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_66_i_reg_726,
        din1 => tmp_i_41_reg_677,
        ce => grp_fu_244_ce,
        dout => grp_fu_244_p2);

    sinGen_fmul_32ns_32ns_32_4_max_dsp_U24 : component sinGen_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_248_p0,
        din1 => grp_fu_248_p1,
        ce => grp_fu_248_ce,
        dout => grp_fu_248_p2);

    sinGen_fmul_32ns_32ns_32_4_max_dsp_U25 : component sinGen_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_254_p0,
        din1 => grp_fu_254_p1,
        ce => grp_fu_254_ce,
        dout => grp_fu_254_p2);

    sinGen_fdiv_32ns_32ns_32_16_U26 : component sinGen_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => rawI_load_reg_701,
        din1 => maxI_reg_661,
        ce => grp_fu_260_ce,
        dout => grp_fu_260_p2);

    sinGen_fdiv_32ns_32ns_32_16_U27 : component sinGen_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => rawQ_load_reg_706,
        din1 => maxQ_reg_666,
        ce => grp_fu_264_ce,
        dout => grp_fu_264_p2);

    sinGen_sitofp_64ns_32_6_U28 : component sinGen_sitofp_64ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_268_p0,
        ce => grp_fu_268_ce,
        dout => grp_fu_268_p1);

    sinGen_sitofp_64ns_32_6_U29 : component sinGen_sitofp_64ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_271_p0,
        ce => grp_fu_271_ce,
        dout => grp_fu_271_p1);

    sinGen_fptrunc_64ns_32_1_U30 : component sinGen_fptrunc_64ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_4_reg_640,
        dout => t_in_assign_fu_274_p1);

    sinGen_dmul_64ns_64ns_64_6_max_dsp_U31 : component sinGen_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_277_p0,
        din1 => grp_fu_277_p1,
        ce => grp_fu_277_ce,
        dout => grp_fu_277_p2);

    sinGen_sitodp_64ns_64_6_U32 : component sinGen_sitodp_64ns_64_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_283_p0,
        ce => grp_fu_283_ce,
        dout => grp_fu_283_p1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_sinGen_max_fu_230_ap_start_ap_start_reg assign process. --
    grp_sinGen_max_fu_230_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sinGen_max_fu_230_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
                    grp_sinGen_max_fu_230_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sinGen_max_fu_230_ap_ready)) then 
                    grp_sinGen_max_fu_230_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_sinGen_max_fu_235_ap_start_ap_start_reg assign process. --
    grp_sinGen_max_fu_235_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sinGen_max_fu_235_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
                    grp_sinGen_max_fu_235_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sinGen_max_fu_235_ap_ready)) then 
                    grp_sinGen_max_fu_235_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_sinGen_sinf_or_cosf_fu_200_ap_start_ap_start_reg assign process. --
    grp_sinGen_sinf_or_cosf_fu_200_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sinGen_sinf_or_cosf_fu_200_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
                    grp_sinGen_sinf_or_cosf_fu_200_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sinGen_sinf_or_cosf_fu_200_ap_ready)) then 
                    grp_sinGen_sinf_or_cosf_fu_200_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_sinGen_sinf_or_cosf_fu_215_ap_start_ap_start_reg assign process. --
    grp_sinGen_sinf_or_cosf_fu_215_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sinGen_sinf_or_cosf_fu_215_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
                    grp_sinGen_sinf_or_cosf_fu_215_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sinGen_sinf_or_cosf_fu_215_ap_ready)) then 
                    grp_sinGen_sinf_or_cosf_fu_215_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_i_reg_188 assign process. --
    i_i_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71)) then 
                i_i_reg_188 <= i_reg_686;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) and not(((ap_const_logic_0 = grp_sinGen_max_fu_230_ap_done) or (ap_const_logic_0 = grp_sinGen_max_fu_235_ap_done))))) then 
                i_i_reg_188 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- idx_reg_176 assign process. --
    idx_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
                idx_reg_176 <= idx_1_reg_625;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                idx_reg_176 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                amp_read_reg_607 <= amp;
                binOffset_read_reg_602 <= binOffset;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then
                i_reg_686 <= i_fu_339_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                idx_1_reg_625 <= idx_1_fu_313_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70)) then
                isNeg_1_reg_769 <= sh_assign_2_fu_498_p2(8 downto 8);
                sh_assign_3_reg_774 <= sh_assign_3_fu_521_p3;
                    tmp_29_reg_764(7 downto 1) <= tmp_29_fu_484_p2(7 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then
                isNeg_reg_753 <= sh_assign_fu_390_p2(8 downto 8);
                sh_assign_1_reg_758 <= sh_assign_1_fu_413_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68)) then
                loc_V_2_reg_737 <= loc_V_2_fu_365_p1;
                loc_V_3_reg_742 <= p_Val2_36_fu_369_p1(30 downto 23);
                loc_V_4_reg_748 <= loc_V_4_fu_383_p1;
                loc_V_reg_731 <= p_Val2_s_fu_351_p1(30 downto 23);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) and not(((ap_const_logic_0 = grp_sinGen_max_fu_230_ap_done) or (ap_const_logic_0 = grp_sinGen_max_fu_235_ap_done))))) then
                maxI_reg_661 <= grp_sinGen_max_fu_230_ap_return;
                maxQ_reg_666 <= grp_sinGen_max_fu_235_ap_return;
                tmp_i_41_reg_677 <= grp_fu_271_p1;
                tmp_i_reg_671 <= grp_fu_268_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then
                rawI_load_reg_701 <= rawI_q0;
                rawQ_load_reg_706 <= rawQ_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then
                reg_286 <= grp_fu_283_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then
                reg_292 <= grp_fu_277_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                t_in_assign_reg_645 <= t_in_assign_fu_274_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then
                tmp_4_reg_640 <= grp_fu_277_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st60_fsm_59)) then
                tmp_60_i_reg_711 <= grp_fu_260_p2;
                tmp_65_i_reg_716 <= grp_fu_264_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then
                tmp_61_i_reg_721 <= grp_fu_248_p2;
                tmp_66_i_reg_726 <= grp_fu_254_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not(((ap_const_logic_0 = grp_sinGen_sinf_or_cosf_fu_200_ap_done) or (ap_const_logic_0 = grp_sinGen_sinf_or_cosf_fu_215_ap_done))))) then
                tmp_i_i1_reg_656 <= grp_sinGen_sinf_or_cosf_fu_215_ap_return;
                tmp_i_i_reg_651 <= grp_sinGen_sinf_or_cosf_fu_200_ap_return;
            end if;
        end if;
    end process;
    tmp_29_reg_764(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_307_p2, grp_sinGen_sinf_or_cosf_fu_200_ap_done, grp_sinGen_sinf_or_cosf_fu_215_ap_done, grp_sinGen_max_fu_230_ap_done, grp_sinGen_max_fu_235_ap_done, exitcond_i_fu_333_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                if (not((exitcond_fu_307_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st38_fsm_37;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                if (not(((ap_const_logic_0 = grp_sinGen_sinf_or_cosf_fu_200_ap_done) or (ap_const_logic_0 = grp_sinGen_sinf_or_cosf_fu_215_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                end if;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                if (not(((ap_const_logic_0 = grp_sinGen_max_fu_230_ap_done) or (ap_const_logic_0 = grp_sinGen_max_fu_235_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st43_fsm_42;
                else
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                end if;
            when ap_ST_st43_fsm_42 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_333_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st44_fsm_43;
                end if;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st43_fsm_42, exitcond_i_fu_333_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) and not((ap_const_lv1_0 = exitcond_i_fu_333_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st43_fsm_42, exitcond_i_fu_333_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) and not((ap_const_lv1_0 = exitcond_i_fu_333_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_150 assign process. --
    ap_sig_bdd_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_150 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_157 assign process. --
    ap_sig_bdd_157_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_157 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_167 assign process. --
    ap_sig_bdd_167_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_167 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_193 assign process. --
    ap_sig_bdd_193_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_193 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_212 assign process. --
    ap_sig_bdd_212_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_212 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_230 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_248 assign process. --
    ap_sig_bdd_248_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_248 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_270 assign process. --
    ap_sig_bdd_270_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_270 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    -- ap_sig_bdd_286 assign process. --
    ap_sig_bdd_286_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_286 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_297 assign process. --
    ap_sig_bdd_297_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_297 <= (ap_const_lv1_1 = ap_CS_fsm(59 downto 59));
    end process;


    -- ap_sig_bdd_308 assign process. --
    ap_sig_bdd_308_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_308 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    -- ap_sig_bdd_319 assign process. --
    ap_sig_bdd_319_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_319 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    -- ap_sig_bdd_334 assign process. --
    ap_sig_bdd_334_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_334 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    -- ap_sig_bdd_345 assign process. --
    ap_sig_bdd_345_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_345 <= (ap_const_lv1_1 = ap_CS_fsm(70 downto 70));
    end process;


    -- ap_sig_bdd_404 assign process. --
    ap_sig_bdd_404_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_404 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_413 assign process. --
    ap_sig_bdd_413_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_413 <= (ap_const_lv1_1 = ap_CS_fsm(71 downto 71));
    end process;


    -- ap_sig_bdd_422 assign process. --
    ap_sig_bdd_422_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_422 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_477 assign process. --
    ap_sig_bdd_477_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_477 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_514 assign process. --
    ap_sig_bdd_514_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_514 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_521 assign process. --
    ap_sig_bdd_521_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_521 <= (ap_const_lv1_1 = ap_CS_fsm(60 downto 60));
    end process;


    -- ap_sig_bdd_548 assign process. --
    ap_sig_bdd_548_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_548 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_555 assign process. --
    ap_sig_bdd_555_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_555 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_562 assign process. --
    ap_sig_bdd_562_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_562 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_718 assign process. --
    ap_sig_bdd_718_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_718 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_726 assign process. --
    ap_sig_bdd_726_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_726 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_734 assign process. --
    ap_sig_bdd_734_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_734 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    -- ap_sig_bdd_90 assign process. --
    ap_sig_bdd_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_90 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_167)
    begin
        if (ap_sig_bdd_167) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_555)
    begin
        if (ap_sig_bdd_555) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_193)
    begin
        if (ap_sig_bdd_193) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_90)
    begin
        if (ap_sig_bdd_90) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_157)
    begin
        if (ap_sig_bdd_157) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_562)
    begin
        if (ap_sig_bdd_562) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_212)
    begin
        if (ap_sig_bdd_212) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_422)
    begin
        if (ap_sig_bdd_422) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_230)
    begin
        if (ap_sig_bdd_230) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_514)
    begin
        if (ap_sig_bdd_514) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_404)
    begin
        if (ap_sig_bdd_404) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_718)
    begin
        if (ap_sig_bdd_718) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_726)
    begin
        if (ap_sig_bdd_726) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_39 assign process. --
    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_bdd_734)
    begin
        if (ap_sig_bdd_734) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_40 assign process. --
    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_bdd_477)
    begin
        if (ap_sig_bdd_477) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st42_fsm_41 assign process. --
    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_bdd_248)
    begin
        if (ap_sig_bdd_248) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st43_fsm_42 assign process. --
    ap_sig_cseq_ST_st43_fsm_42_assign_proc : process(ap_sig_bdd_270)
    begin
        if (ap_sig_bdd_270) then 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_43 assign process. --
    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_bdd_286)
    begin
        if (ap_sig_bdd_286) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st60_fsm_59 assign process. --
    ap_sig_cseq_ST_st60_fsm_59_assign_proc : process(ap_sig_bdd_297)
    begin
        if (ap_sig_bdd_297) then 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st60_fsm_59 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st61_fsm_60 assign process. --
    ap_sig_cseq_ST_st61_fsm_60_assign_proc : process(ap_sig_bdd_521)
    begin
        if (ap_sig_bdd_521) then 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st64_fsm_63 assign process. --
    ap_sig_cseq_ST_st64_fsm_63_assign_proc : process(ap_sig_bdd_308)
    begin
        if (ap_sig_bdd_308) then 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st69_fsm_68 assign process. --
    ap_sig_cseq_ST_st69_fsm_68_assign_proc : process(ap_sig_bdd_319)
    begin
        if (ap_sig_bdd_319) then 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_150)
    begin
        if (ap_sig_bdd_150) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st70_fsm_69 assign process. --
    ap_sig_cseq_ST_st70_fsm_69_assign_proc : process(ap_sig_bdd_334)
    begin
        if (ap_sig_bdd_334) then 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st71_fsm_70 assign process. --
    ap_sig_cseq_ST_st71_fsm_70_assign_proc : process(ap_sig_bdd_345)
    begin
        if (ap_sig_bdd_345) then 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st72_fsm_71 assign process. --
    ap_sig_cseq_ST_st72_fsm_71_assign_proc : process(ap_sig_bdd_413)
    begin
        if (ap_sig_bdd_413) then 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_548)
    begin
        if (ap_sig_bdd_548) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    cycle5_fu_297_p1 <= std_logic_vector(resize(unsigned(cycle),64));
    exitcond_fu_307_p2 <= "1" when (idx_reg_176 = ap_const_lv8_80) else "0";
    exitcond_i_fu_333_p2 <= "1" when (i_i_reg_188 = ap_const_lv8_80) else "0";
    grp_fu_240_ce <= ap_const_logic_1;
    grp_fu_244_ce <= ap_const_logic_1;
    grp_fu_248_ce <= ap_const_logic_1;

    -- grp_fu_248_p0 assign process. --
    grp_fu_248_p0_assign_proc : process(tmp_i_i_reg_651, tmp_60_i_reg_711, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st61_fsm_60)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60)) then 
            grp_fu_248_p0 <= tmp_60_i_reg_711;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_248_p0 <= tmp_i_i_reg_651;
        else 
            grp_fu_248_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_248_p1 assign process. --
    grp_fu_248_p1_assign_proc : process(tmp_i_reg_671, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st61_fsm_60)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60)) then 
            grp_fu_248_p1 <= tmp_i_reg_671;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_248_p1 <= ap_const_lv32_40800000;
        else 
            grp_fu_248_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_254_ce <= ap_const_logic_1;

    -- grp_fu_254_p0 assign process. --
    grp_fu_254_p0_assign_proc : process(tmp_i_i1_reg_656, tmp_65_i_reg_716, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st61_fsm_60)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60)) then 
            grp_fu_254_p0 <= tmp_65_i_reg_716;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_254_p0 <= tmp_i_i1_reg_656;
        else 
            grp_fu_254_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_254_p1 assign process. --
    grp_fu_254_p1_assign_proc : process(tmp_i_reg_671, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st61_fsm_60)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60)) then 
            grp_fu_254_p1 <= tmp_i_reg_671;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_254_p1 <= ap_const_lv32_40800000;
        else 
            grp_fu_254_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_260_ce <= ap_const_logic_1;
    grp_fu_264_ce <= ap_const_logic_1;

    -- grp_fu_268_ce assign process. --
    grp_fu_268_ce_assign_proc : process(ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st42_fsm_41, grp_sinGen_max_fu_230_ap_done, grp_sinGen_max_fu_235_ap_done, ap_sig_cseq_ST_st41_fsm_40, ap_sig_cseq_ST_st38_fsm_37, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st40_fsm_39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) and not(((ap_const_logic_0 = grp_sinGen_max_fu_230_ap_done) or (ap_const_logic_0 = grp_sinGen_max_fu_235_ap_done)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then 
            grp_fu_268_ce <= ap_const_logic_1;
        else 
            grp_fu_268_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_268_p0 <= std_logic_vector(resize(unsigned(amp_read_reg_607),64));

    -- grp_fu_271_ce assign process. --
    grp_fu_271_ce_assign_proc : process(ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st42_fsm_41, grp_sinGen_max_fu_230_ap_done, grp_sinGen_max_fu_235_ap_done, ap_sig_cseq_ST_st41_fsm_40, ap_sig_cseq_ST_st38_fsm_37, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st40_fsm_39)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) and not(((ap_const_logic_0 = grp_sinGen_max_fu_230_ap_done) or (ap_const_logic_0 = grp_sinGen_max_fu_235_ap_done)))) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then 
            grp_fu_271_ce <= ap_const_logic_1;
        else 
            grp_fu_271_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_271_p0 <= std_logic_vector(resize(unsigned(binOffset_read_reg_602),64));
    grp_fu_277_ce <= ap_const_logic_1;

    -- grp_fu_277_p0 assign process. --
    grp_fu_277_p0_assign_proc : process(reg_286, reg_292, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24))) then 
            grp_fu_277_p0 <= reg_292;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_277_p0 <= reg_286;
        else 
            grp_fu_277_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_277_p1 assign process. --
    grp_fu_277_p1_assign_proc : process(reg_286, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_277_p1 <= reg_286;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_277_p1 <= ap_const_lv64_3F80000000000000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_277_p1 <= ap_const_lv64_40091EB851EB851F;
        else 
            grp_fu_277_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_283_ce <= ap_const_logic_1;

    -- grp_fu_283_p0 assign process. --
    grp_fu_283_p0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, cycle5_fu_297_p1, idx_cast4_fu_302_p1, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            grp_fu_283_p0 <= std_logic_vector(resize(unsigned(idx_cast4_fu_302_p1),64));
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_283_p0 <= cycle5_fu_297_p1;
        else 
            grp_fu_283_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sinGen_max_fu_230_ap_start <= grp_sinGen_max_fu_230_ap_start_ap_start_reg;
    grp_sinGen_max_fu_230_data_q0 <= rawI_q0;
    grp_sinGen_max_fu_235_ap_start <= grp_sinGen_max_fu_235_ap_start_ap_start_reg;
    grp_sinGen_max_fu_235_data_q0 <= rawQ_q0;
    grp_sinGen_sinf_or_cosf_fu_200_ap_start <= grp_sinGen_sinf_or_cosf_fu_200_ap_start_ap_start_reg;
    grp_sinGen_sinf_or_cosf_fu_200_do_cos <= ap_const_logic_0;
    grp_sinGen_sinf_or_cosf_fu_200_t_in <= t_in_assign_reg_645;
    grp_sinGen_sinf_or_cosf_fu_215_ap_start <= grp_sinGen_sinf_or_cosf_fu_215_ap_start_ap_start_reg;
    grp_sinGen_sinf_or_cosf_fu_215_do_cos <= ap_const_logic_1;
    grp_sinGen_sinf_or_cosf_fu_215_t_in <= t_in_assign_reg_645;
    i_fu_339_p2 <= std_logic_vector(unsigned(i_i_reg_188) + unsigned(ap_const_lv8_1));
    idx_1_fu_313_p2 <= std_logic_vector(unsigned(idx_reg_176) + unsigned(ap_const_lv8_1));
    idx_cast4_fu_302_p1 <= std_logic_vector(resize(unsigned(idx_reg_176),32));
    isNeg_1_fu_504_p3 <= sh_assign_2_fu_498_p2(8 downto 8);
    isNeg_fu_396_p3 <= sh_assign_fu_390_p2(8 downto 8);
    loc_V_2_fu_365_p1 <= p_Val2_s_fu_351_p1(23 - 1 downto 0);
    loc_V_4_fu_383_p1 <= p_Val2_36_fu_369_p1(23 - 1 downto 0);

    -- outIQ_address0 assign process. --
    outIQ_address0_assign_proc : process(ap_sig_cseq_ST_st71_fsm_70, ap_sig_cseq_ST_st72_fsm_71, tmp_64_i_fu_490_p1, tmp_69_i_fu_597_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71)) then 
            outIQ_address0 <= tmp_69_i_fu_597_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70)) then 
            outIQ_address0 <= tmp_64_i_fu_490_p1(8 - 1 downto 0);
        else 
            outIQ_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- outIQ_ce0 assign process. --
    outIQ_ce0_assign_proc : process(ap_sig_cseq_ST_st71_fsm_70, ap_sig_cseq_ST_st72_fsm_71)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) or (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71))) then 
            outIQ_ce0 <= ap_const_logic_1;
        else 
            outIQ_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- outIQ_d0 assign process. --
    outIQ_d0_assign_proc : process(ap_sig_cseq_ST_st71_fsm_70, ap_sig_cseq_ST_st72_fsm_71, result_V_fu_476_p3, result_V_1_fu_584_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71)) then 
            outIQ_d0 <= result_V_1_fu_584_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70)) then 
            outIQ_d0 <= result_V_fu_476_p3;
        else 
            outIQ_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- outIQ_we0 assign process. --
    outIQ_we0_assign_proc : process(ap_sig_cseq_ST_st71_fsm_70, ap_sig_cseq_ST_st72_fsm_71)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) or (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71))) then 
            outIQ_we0 <= ap_const_logic_1;
        else 
            outIQ_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_25_fu_529_p3 <= (ap_const_lv1_1 & loc_V_4_reg_748);
    p_Result_s_fu_421_p3 <= (ap_const_lv1_1 & loc_V_2_reg_737);
    p_Val2_36_fu_369_p1 <= grp_fu_244_p2;
    p_Val2_s_fu_351_p1 <= grp_fu_240_p2;

    -- rawI_address0 assign process. --
    rawI_address0_assign_proc : process(ap_sig_cseq_ST_st42_fsm_41, ap_sig_cseq_ST_st43_fsm_42, grp_sinGen_max_fu_230_data_address0, ap_sig_cseq_ST_st37_fsm_36, tmp_8_fu_327_p1, tmp_59_i_fu_345_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            rawI_address0 <= tmp_8_fu_327_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            rawI_address0 <= tmp_59_i_fu_345_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
            rawI_address0 <= grp_sinGen_max_fu_230_data_address0;
        else 
            rawI_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- rawI_ce0 assign process. --
    rawI_ce0_assign_proc : process(ap_sig_cseq_ST_st42_fsm_41, ap_sig_cseq_ST_st43_fsm_42, grp_sinGen_max_fu_230_data_ce0, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            rawI_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
            rawI_ce0 <= grp_sinGen_max_fu_230_data_ce0;
        else 
            rawI_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rawI_d0 <= grp_fu_248_p2;

    -- rawI_we0 assign process. --
    rawI_we0_assign_proc : process(ap_sig_cseq_ST_st37_fsm_36)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            rawI_we0 <= ap_const_logic_1;
        else 
            rawI_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- rawQ_address0 assign process. --
    rawQ_address0_assign_proc : process(ap_sig_cseq_ST_st42_fsm_41, ap_sig_cseq_ST_st43_fsm_42, grp_sinGen_max_fu_235_data_address0, ap_sig_cseq_ST_st37_fsm_36, tmp_8_fu_327_p1, tmp_59_i_fu_345_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            rawQ_address0 <= tmp_8_fu_327_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            rawQ_address0 <= tmp_59_i_fu_345_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
            rawQ_address0 <= grp_sinGen_max_fu_235_data_address0;
        else 
            rawQ_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- rawQ_ce0 assign process. --
    rawQ_ce0_assign_proc : process(ap_sig_cseq_ST_st42_fsm_41, ap_sig_cseq_ST_st43_fsm_42, grp_sinGen_max_fu_235_data_ce0, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            rawQ_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
            rawQ_ce0 <= grp_sinGen_max_fu_235_data_ce0;
        else 
            rawQ_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rawQ_d0 <= grp_fu_254_p2;

    -- rawQ_we0 assign process. --
    rawQ_we0_assign_proc : process(ap_sig_cseq_ST_st37_fsm_36)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36))) then 
            rawQ_we0 <= ap_const_logic_1;
        else 
            rawQ_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_V_1_fu_584_p3 <= 
        tmp_13_fu_570_p1 when (isNeg_1_reg_769(0) = '1') else 
        tmp_14_fu_574_p4;
    result_V_fu_476_p3 <= 
        tmp_6_fu_462_p1 when (isNeg_reg_753(0) = '1') else 
        tmp_9_fu_466_p4;
    sh_assign_1_fu_413_p3 <= 
        tmp_56_i_i_i_cast_fu_409_p1 when (isNeg_fu_396_p3(0) = '1') else 
        sh_assign_fu_390_p2;
    sh_assign_2_fu_498_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i1_i_cast1_fu_495_p1));
    sh_assign_3_fu_521_p3 <= 
        tmp_56_i_i1_i_cast_fu_517_p1 when (isNeg_1_fu_504_p3(0) = '1') else 
        sh_assign_2_fu_498_p2;
        sh_assign_3_i_cast_cast_fu_435_p1 <= std_logic_vector(resize(signed(sh_assign_1_reg_758),24));

        sh_assign_3_i_cast_fu_432_p1 <= std_logic_vector(resize(signed(sh_assign_1_reg_758),32));

        sh_assign_5_i_cast_cast_fu_543_p1 <= std_logic_vector(resize(signed(sh_assign_3_reg_774),24));

        sh_assign_5_i_cast_fu_540_p1 <= std_logic_vector(resize(signed(sh_assign_3_reg_774),32));

    sh_assign_fu_390_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast2_fu_387_p1));
    sinGen_CRTLS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    tmp_13_fu_570_p1 <= std_logic_vector(resize(unsigned(tmp_32_fu_562_p3),32));
    tmp_14_fu_574_p4 <= tmp_60_i_i1_i_fu_556_p2(54 downto 23);
    tmp_28_fu_454_p3 <= tmp_58_i_i_i_fu_442_p2(23 downto 23);
    tmp_29_fu_484_p2 <= std_logic_vector(shift_left(unsigned(i_i_reg_188),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_32_fu_562_p3 <= tmp_58_i_i1_i_fu_550_p2(23 downto 23);
        tmp_56_i_i1_i_cast_fu_517_p1 <= std_logic_vector(resize(signed(tmp_56_i_i1_i_fu_512_p2),9));

    tmp_56_i_i1_i_fu_512_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_3_reg_742));
        tmp_56_i_i_i_cast_fu_409_p1 <= std_logic_vector(resize(signed(tmp_56_i_i_i_fu_404_p2),9));

    tmp_56_i_i_i_fu_404_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_reg_731));
    tmp_57_i_i1_i_fu_546_p1 <= std_logic_vector(resize(unsigned(sh_assign_5_i_cast_fu_540_p1),78));
    tmp_57_i_i_i_fu_438_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_i_cast_fu_432_p1),78));
    tmp_58_i_i1_i_fu_550_p2 <= std_logic_vector(shift_right(unsigned(p_Result_25_fu_529_p3),to_integer(unsigned('0' & sh_assign_5_i_cast_cast_fu_543_p1(24-1 downto 0)))));
    tmp_58_i_i_i_fu_442_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_421_p3),to_integer(unsigned('0' & sh_assign_3_i_cast_cast_fu_435_p1(24-1 downto 0)))));
    tmp_59_i_fu_345_p1 <= std_logic_vector(resize(unsigned(i_i_reg_188),64));
    tmp_60_i_i1_i_fu_556_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i1_i_fu_536_p1),to_integer(unsigned('0' & tmp_57_i_i1_i_fu_546_p1(31-1 downto 0)))));
    tmp_60_i_i_i_fu_448_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_fu_428_p1),to_integer(unsigned('0' & tmp_57_i_i_i_fu_438_p1(31-1 downto 0)))));
    tmp_64_i_fu_490_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_484_p2),64));
    tmp_68_i_fu_592_p2 <= (tmp_29_reg_764 or ap_const_lv8_1);
    tmp_69_i_fu_597_p1 <= std_logic_vector(resize(unsigned(tmp_68_i_fu_592_p2),64));
    tmp_6_fu_462_p1 <= std_logic_vector(resize(unsigned(tmp_28_fu_454_p3),32));
    tmp_8_fu_327_p1 <= std_logic_vector(resize(unsigned(idx_reg_176),64));
    tmp_9_fu_466_p4 <= tmp_60_i_i_i_fu_448_p2(54 downto 23);
    tmp_i_i1_i_fu_536_p1 <= std_logic_vector(resize(unsigned(p_Result_25_fu_529_p3),78));
    tmp_i_i_i1_i_cast1_fu_495_p1 <= std_logic_vector(resize(unsigned(loc_V_3_reg_742),9));
    tmp_i_i_i_fu_428_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_421_p3),78));
    tmp_i_i_i_i_cast2_fu_387_p1 <= std_logic_vector(resize(unsigned(loc_V_reg_731),9));
end behav;
