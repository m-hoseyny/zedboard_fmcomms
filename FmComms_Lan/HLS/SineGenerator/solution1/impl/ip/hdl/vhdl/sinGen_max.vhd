-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sinGen_max is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sinGen_max is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal i_1_fu_82_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_283 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_44 : BOOLEAN;
    signal exitcond_fu_76_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_1_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_58 : BOOLEAN;
    signal tmp_17_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_67 : BOOLEAN;
    signal max_1_2_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_1_2_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_70_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_322 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_2_fu_234_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_2_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_84 : BOOLEAN;
    signal sel_tmp6_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_337 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_95 : BOOLEAN;
    signal max_3_fu_273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_106 : BOOLEAN;
    signal max_1_1_reg_42 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_54 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_88_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_65_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_70_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_2_to_int_fu_93_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_96_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_fu_106_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_65_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_1_neg_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_to_int_fu_159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_145_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_155_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_163_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_fu_173_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_4_fu_267_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_65_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_fu_70_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component sinGen_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sinGen_fcmp_32ns_32ns_1_1_U19 : component sinGen_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => max_1_reg_293,
        din1 => grp_fu_65_p1,
        opcode => grp_fu_65_opcode,
        dout => grp_fu_65_p2);

    sinGen_fcmp_32ns_32ns_1_1_U20 : component sinGen_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_25_fu_70_p0,
        din1 => max_1_1_reg_42,
        opcode => tmp_25_fu_70_opcode,
        dout => tmp_25_fu_70_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_76_p2 = ap_const_lv1_0)))) then 
                    ap_return_preg <= max_1_1_reg_42;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_54 assign process. --
    i_reg_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i_reg_54 <= i_1_reg_283;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_54 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- max_1_1_reg_42 assign process. --
    max_1_1_reg_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                max_1_1_reg_42 <= max_3_fu_273_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                max_1_1_reg_42 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_283 <= i_1_fu_82_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                max_1_2_reg_307 <= max_1_2_fu_140_p1;
                tmp_17_reg_300 <= tmp_17_fu_128_p2;
                tmp_24_reg_312 <= tmp_24_fu_213_p2;
                tmp_25_reg_317 <= tmp_25_fu_70_p2;
                tmp_s_reg_322 <= tmp_s_fu_219_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                max_1_reg_293 <= data_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                max_2_reg_327 <= max_2_fu_234_p3;
                sel_tmp6_reg_332 <= sel_tmp6_fu_247_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = sel_tmp6_reg_332))) then
                tmp_28_reg_337 <= tmp_28_fu_252_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_76_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_76_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_76_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_76_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_76_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_76_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_76_p2, max_1_1_reg_42, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_76_p2 = ap_const_lv1_0)))) then 
            ap_return <= max_1_1_reg_42;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_106 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_44 assign process. --
    ap_sig_bdd_44_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_44 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_58 assign process. --
    ap_sig_bdd_58_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_58 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_67 assign process. --
    ap_sig_bdd_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_67 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_84 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_95 assign process. --
    ap_sig_bdd_95_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_95 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_44)
    begin
        if (ap_sig_bdd_44) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_58)
    begin
        if (ap_sig_bdd_58) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_67)
    begin
        if (ap_sig_bdd_67) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_84)
    begin
        if (ap_sig_bdd_84) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_95)
    begin
        if (ap_sig_bdd_95) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_106)
    begin
        if (ap_sig_bdd_106) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    data_address0 <= tmp_fu_88_p1(7 - 1 downto 0);

    -- data_ce0 assign process. --
    data_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_76_p2 <= "1" when (i_reg_54 = ap_const_lv8_80) else "0";

    -- grp_fu_65_opcode assign process. --
    grp_fu_65_opcode_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, sel_tmp6_reg_332, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = sel_tmp6_reg_332))) then 
            grp_fu_65_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_fu_65_opcode <= ap_const_lv5_4;
        else 
            grp_fu_65_opcode <= "XXXXX";
        end if; 
    end process;


    -- grp_fu_65_p1 assign process. --
    grp_fu_65_p1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, max_1_1_reg_42)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_fu_65_p1 <= max_1_1_reg_42;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_fu_65_p1 <= ap_const_lv32_0;
        else 
            grp_fu_65_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_82_p2 <= std_logic_vector(unsigned(i_reg_54) + unsigned(ap_const_lv8_1));
    max_1_2_fu_140_p1 <= max_1_neg_fu_134_p2;
    max_1_neg_fu_134_p2 <= (max_2_to_int_fu_93_p1 xor ap_const_lv32_80000000);
    max_2_fu_234_p3 <= 
        max_1_2_reg_307 when (sel_tmp_fu_229_p2(0) = '1') else 
        max_1_1_reg_42;
    max_2_to_int_fu_93_p1 <= max_1_reg_293;
    max_3_fu_273_p3 <= 
        max_1_1_reg_42 when (sel_tmp6_reg_332(0) = '1') else 
        max_4_fu_267_p3;
    max_4_fu_267_p3 <= 
        max_1_reg_293 when (sel_tmp3_fu_262_p2(0) = '1') else 
        max_2_reg_327;
    max_to_int_fu_159_p1 <= max_1_1_reg_42;
    notlhs1_fu_177_p2 <= "0" when (tmp_18_fu_145_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_195_p2 <= "0" when (tmp_20_fu_163_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_110_p2 <= "0" when (tmp_13_fu_96_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_183_p2 <= "1" when (tmp_44_fu_155_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_201_p2 <= "1" when (tmp_45_fu_173_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_116_p2 <= "1" when (tmp_43_fu_106_p1 = ap_const_lv23_0) else "0";
    sel_tmp2_fu_257_p2 <= (tmp_17_reg_300 xor ap_const_lv1_1);
    sel_tmp3_fu_262_p2 <= (tmp_28_reg_337 and sel_tmp2_fu_257_p2);
    sel_tmp5_fu_241_p2 <= (tmp_26_fu_225_p2 xor ap_const_lv1_1);
    sel_tmp6_fu_247_p2 <= (tmp_17_reg_300 and sel_tmp5_fu_241_p2);
    sel_tmp_fu_229_p2 <= (tmp_17_reg_300 and tmp_26_fu_225_p2);
    tmp_13_fu_96_p4 <= max_2_to_int_fu_93_p1(30 downto 23);
    tmp_15_fu_122_p2 <= (notrhs_fu_116_p2 or notlhs_fu_110_p2);
    tmp_17_fu_128_p2 <= (tmp_15_fu_122_p2 and grp_fu_65_p2);
    tmp_18_fu_145_p4 <= max_1_neg_fu_134_p2(30 downto 23);
    tmp_20_fu_163_p4 <= max_to_int_fu_159_p1(30 downto 23);
    tmp_22_fu_189_p2 <= (notrhs1_fu_183_p2 or notlhs1_fu_177_p2);
    tmp_23_fu_207_p2 <= (notrhs2_fu_201_p2 or notlhs2_fu_195_p2);
    tmp_24_fu_213_p2 <= (tmp_22_fu_189_p2 and tmp_23_fu_207_p2);
    tmp_25_fu_70_opcode <= ap_const_lv5_2;
    tmp_25_fu_70_p0 <= max_1_neg_fu_134_p2;
    tmp_26_fu_225_p2 <= (tmp_24_reg_312 and tmp_25_reg_317);
    tmp_28_fu_252_p2 <= (tmp_s_reg_322 and grp_fu_65_p2);
    tmp_43_fu_106_p1 <= max_2_to_int_fu_93_p1(23 - 1 downto 0);
    tmp_44_fu_155_p1 <= max_1_neg_fu_134_p2(23 - 1 downto 0);
    tmp_45_fu_173_p1 <= max_to_int_fu_159_p1(23 - 1 downto 0);
    tmp_fu_88_p1 <= std_logic_vector(resize(unsigned(i_reg_54),64));
    tmp_s_fu_219_p2 <= (tmp_15_fu_122_p2 and tmp_23_fu_207_p2);
end behav;
