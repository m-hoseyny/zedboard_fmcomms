// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sinGen_max (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_address0,
        data_ce0,
        data_q0,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 7'b1;
parameter    ap_ST_st2_fsm_1 = 7'b10;
parameter    ap_ST_st3_fsm_2 = 7'b100;
parameter    ap_ST_st4_fsm_3 = 7'b1000;
parameter    ap_ST_st5_fsm_4 = 7'b10000;
parameter    ap_ST_st6_fsm_5 = 7'b100000;
parameter    ap_ST_st7_fsm_6 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv32_80000000 = 32'b10000000000000000000000000000000;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] data_address0;
output   data_ce0;
input  [31:0] data_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_ce0;
reg[31:0] ap_return;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm = 7'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_25;
wire   [7:0] i_1_fu_82_p2;
reg   [7:0] i_1_reg_283;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_44;
wire   [0:0] exitcond_fu_76_p2;
reg   [31:0] max_1_reg_293;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_58;
wire   [0:0] tmp_17_fu_128_p2;
reg   [0:0] tmp_17_reg_300;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_67;
wire   [31:0] max_1_2_fu_140_p1;
reg   [31:0] max_1_2_reg_307;
wire   [0:0] tmp_24_fu_213_p2;
reg   [0:0] tmp_24_reg_312;
wire   [0:0] tmp_25_fu_70_p2;
reg   [0:0] tmp_25_reg_317;
wire   [0:0] tmp_s_fu_219_p2;
reg   [0:0] tmp_s_reg_322;
wire   [31:0] max_2_fu_234_p3;
reg   [31:0] max_2_reg_327;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_84;
wire   [0:0] sel_tmp6_fu_247_p2;
reg   [0:0] sel_tmp6_reg_332;
wire   [0:0] tmp_28_fu_252_p2;
reg   [0:0] tmp_28_reg_337;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_95;
wire   [31:0] max_3_fu_273_p3;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_106;
reg   [31:0] max_1_1_reg_42;
reg   [7:0] i_reg_54;
wire   [63:0] tmp_fu_88_p1;
reg   [31:0] grp_fu_65_p1;
wire   [31:0] tmp_25_fu_70_p0;
wire   [31:0] max_2_to_int_fu_93_p1;
wire   [7:0] tmp_13_fu_96_p4;
wire   [22:0] tmp_43_fu_106_p1;
wire   [0:0] notrhs_fu_116_p2;
wire   [0:0] notlhs_fu_110_p2;
wire   [0:0] tmp_15_fu_122_p2;
wire   [0:0] grp_fu_65_p2;
wire   [31:0] max_1_neg_fu_134_p2;
wire   [31:0] max_to_int_fu_159_p1;
wire   [7:0] tmp_18_fu_145_p4;
wire   [22:0] tmp_44_fu_155_p1;
wire   [0:0] notrhs1_fu_183_p2;
wire   [0:0] notlhs1_fu_177_p2;
wire   [7:0] tmp_20_fu_163_p4;
wire   [22:0] tmp_45_fu_173_p1;
wire   [0:0] notrhs2_fu_201_p2;
wire   [0:0] notlhs2_fu_195_p2;
wire   [0:0] tmp_22_fu_189_p2;
wire   [0:0] tmp_23_fu_207_p2;
wire   [0:0] tmp_26_fu_225_p2;
wire   [0:0] sel_tmp_fu_229_p2;
wire   [0:0] sel_tmp5_fu_241_p2;
wire   [0:0] sel_tmp2_fu_257_p2;
wire   [0:0] sel_tmp3_fu_262_p2;
wire   [31:0] max_4_fu_267_p3;
reg   [4:0] grp_fu_65_opcode;
wire   [4:0] tmp_25_fu_70_opcode;
reg   [31:0] ap_return_preg = 32'b00000000000000000000000000000000;
reg   [6:0] ap_NS_fsm;


sinGen_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
sinGen_fcmp_32ns_32ns_1_1_U19(
    .din0( max_1_reg_293 ),
    .din1( grp_fu_65_p1 ),
    .opcode( grp_fu_65_opcode ),
    .dout( grp_fu_65_p2 )
);

sinGen_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
sinGen_fcmp_32ns_32ns_1_1_U20(
    .din0( tmp_25_fu_70_p0 ),
    .din1( max_1_1_reg_42 ),
    .opcode( tmp_25_fu_70_opcode ),
    .dout( tmp_25_fu_70_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_76_p2 == ap_const_lv1_0))) begin
            ap_return_preg <= max_1_1_reg_42;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        i_reg_54 <= i_1_reg_283;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_54 <= ap_const_lv8_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        max_1_1_reg_42 <= max_3_fu_273_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        max_1_1_reg_42 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_283 <= i_1_fu_82_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        max_1_2_reg_307 <= max_1_2_fu_140_p1;
        tmp_17_reg_300 <= tmp_17_fu_128_p2;
        tmp_24_reg_312 <= tmp_24_fu_213_p2;
        tmp_25_reg_317 <= tmp_25_fu_70_p2;
        tmp_s_reg_322 <= tmp_s_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        max_1_reg_293 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        max_2_reg_327 <= max_2_fu_234_p3;
        sel_tmp6_reg_332 <= sel_tmp6_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == sel_tmp6_reg_332))) begin
        tmp_28_reg_337 <= tmp_28_fu_252_p2;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_76_p2) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_76_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_76_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_76_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_76_p2 or max_1_1_reg_42 or ap_return_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_76_p2 == ap_const_lv1_0))) begin
        ap_return = max_1_1_reg_42;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (ap_sig_bdd_25) begin
    if (ap_sig_bdd_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_44) begin
    if (ap_sig_bdd_44) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_58) begin
    if (ap_sig_bdd_58) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_67) begin
    if (ap_sig_bdd_67) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_84) begin
    if (ap_sig_bdd_84) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_95) begin
    if (ap_sig_bdd_95) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_106) begin
    if (ap_sig_bdd_106) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        data_ce0 = ap_const_logic_1;
    end else begin
        data_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or sel_tmp6_reg_332 or ap_sig_cseq_ST_st6_fsm_5) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == sel_tmp6_reg_332))) begin
        grp_fu_65_opcode = ap_const_lv5_2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        grp_fu_65_opcode = ap_const_lv5_4;
    end else begin
        grp_fu_65_opcode = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st6_fsm_5 or max_1_1_reg_42) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        grp_fu_65_p1 = max_1_1_reg_42;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        grp_fu_65_p1 = ap_const_lv32_0;
    end else begin
        grp_fu_65_p1 = 'bx;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_fu_76_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond_fu_76_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_CS_fsm) begin
    ap_sig_bdd_106 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_25 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_44 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_58 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_67 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_84 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_95 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

assign data_address0 = tmp_fu_88_p1;

assign exitcond_fu_76_p2 = (i_reg_54 == ap_const_lv8_80? 1'b1: 1'b0);

assign i_1_fu_82_p2 = (i_reg_54 + ap_const_lv8_1);

assign max_1_2_fu_140_p1 = max_1_neg_fu_134_p2;

assign max_1_neg_fu_134_p2 = (max_2_to_int_fu_93_p1 ^ ap_const_lv32_80000000);

assign max_2_fu_234_p3 = ((sel_tmp_fu_229_p2[0:0] === 1'b1) ? max_1_2_reg_307 : max_1_1_reg_42);

assign max_2_to_int_fu_93_p1 = max_1_reg_293;

assign max_3_fu_273_p3 = ((sel_tmp6_reg_332[0:0] === 1'b1) ? max_1_1_reg_42 : max_4_fu_267_p3);

assign max_4_fu_267_p3 = ((sel_tmp3_fu_262_p2[0:0] === 1'b1) ? max_1_reg_293 : max_2_reg_327);

assign max_to_int_fu_159_p1 = max_1_1_reg_42;

assign notlhs1_fu_177_p2 = (tmp_18_fu_145_p4 != ap_const_lv8_FF? 1'b1: 1'b0);

assign notlhs2_fu_195_p2 = (tmp_20_fu_163_p4 != ap_const_lv8_FF? 1'b1: 1'b0);

assign notlhs_fu_110_p2 = (tmp_13_fu_96_p4 != ap_const_lv8_FF? 1'b1: 1'b0);

assign notrhs1_fu_183_p2 = (tmp_44_fu_155_p1 == ap_const_lv23_0? 1'b1: 1'b0);

assign notrhs2_fu_201_p2 = (tmp_45_fu_173_p1 == ap_const_lv23_0? 1'b1: 1'b0);

assign notrhs_fu_116_p2 = (tmp_43_fu_106_p1 == ap_const_lv23_0? 1'b1: 1'b0);

assign sel_tmp2_fu_257_p2 = (tmp_17_reg_300 ^ ap_const_lv1_1);

assign sel_tmp3_fu_262_p2 = (tmp_28_reg_337 & sel_tmp2_fu_257_p2);

assign sel_tmp5_fu_241_p2 = (tmp_26_fu_225_p2 ^ ap_const_lv1_1);

assign sel_tmp6_fu_247_p2 = (tmp_17_reg_300 & sel_tmp5_fu_241_p2);

assign sel_tmp_fu_229_p2 = (tmp_17_reg_300 & tmp_26_fu_225_p2);

assign tmp_13_fu_96_p4 = {{max_2_to_int_fu_93_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_15_fu_122_p2 = (notrhs_fu_116_p2 | notlhs_fu_110_p2);

assign tmp_17_fu_128_p2 = (tmp_15_fu_122_p2 & grp_fu_65_p2);

assign tmp_18_fu_145_p4 = {{max_1_neg_fu_134_p2[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_20_fu_163_p4 = {{max_to_int_fu_159_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_22_fu_189_p2 = (notrhs1_fu_183_p2 | notlhs1_fu_177_p2);

assign tmp_23_fu_207_p2 = (notrhs2_fu_201_p2 | notlhs2_fu_195_p2);

assign tmp_24_fu_213_p2 = (tmp_22_fu_189_p2 & tmp_23_fu_207_p2);

assign tmp_25_fu_70_opcode = ap_const_lv5_2;

assign tmp_25_fu_70_p0 = max_1_neg_fu_134_p2;

assign tmp_26_fu_225_p2 = (tmp_24_reg_312 & tmp_25_reg_317);

assign tmp_28_fu_252_p2 = (tmp_s_reg_322 & grp_fu_65_p2);

assign tmp_43_fu_106_p1 = max_2_to_int_fu_93_p1[22:0];

assign tmp_44_fu_155_p1 = max_1_neg_fu_134_p2[22:0];

assign tmp_45_fu_173_p1 = max_to_int_fu_159_p1[22:0];

assign tmp_fu_88_p1 = i_reg_54;

assign tmp_s_fu_219_p2 = (tmp_15_fu_122_p2 & tmp_23_fu_207_p2);


endmodule //sinGen_max

