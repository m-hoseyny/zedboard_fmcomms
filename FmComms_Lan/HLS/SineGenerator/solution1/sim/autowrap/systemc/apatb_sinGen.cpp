// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "cycle"
#define AUTOTB_TVIN_cycle  "../tv/cdatafile/c.sinGen.autotvin_cycle.dat"
// wrapc file define: "amp"
#define AUTOTB_TVIN_amp  "../tv/cdatafile/c.sinGen.autotvin_amp.dat"
// wrapc file define: "binOffset"
#define AUTOTB_TVIN_binOffset  "../tv/cdatafile/c.sinGen.autotvin_binOffset.dat"
// wrapc file define: "outIQ"
#define AUTOTB_TVOUT_outIQ  "../tv/cdatafile/c.sinGen.autotvout_outIQ.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "outIQ"
#define AUTOTB_TVOUT_PC_outIQ  "../tv/rtldatafile/rtl.sinGen.autotvout_outIQ.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			cycle_depth = 0;
			amp_depth = 0;
			binOffset_depth = 0;
			outIQ_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{cycle " << cycle_depth << "}\n";
			total_list << "{amp " << amp_depth << "}\n";
			total_list << "{binOffset " << binOffset_depth << "}\n";
			total_list << "{outIQ " << outIQ_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int cycle_depth;
		int amp_depth;
		int binOffset_depth;
		int outIQ_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define sinGen AESL_ORIG_DUT_sinGen
extern void sinGen (
unsigned int Fs,
unsigned int cycle,
unsigned int amp,
unsigned int binOffset,
unsigned int outIQ[256]);
#undef sinGen

void sinGen (
unsigned int Fs,
unsigned int cycle,
unsigned int amp,
unsigned int binOffset,
unsigned int outIQ[256])
{
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "outIQ"
		aesl_fh.read(AUTOTB_TVOUT_PC_outIQ, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_outIQ, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_outIQ, AESL_token); // data

			sc_bv<32> *outIQ_pc_buffer = new sc_bv<32>[256];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'outIQ', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'outIQ', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					outIQ_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_outIQ, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_outIQ))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: outIQ
				{
					// bitslice(31, 0)
					// {
						// celement: outIQ(31, 0)
						// {
							sc_lv<32>* outIQ_lv0_0_255_1 = new sc_lv<32>[256];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: outIQ(31, 0)
						{
							// carray: (0) => (255) @ (1)
							for (int i_0 = 0; i_0 <= 255; i_0 += 1)
							{
								if (&(outIQ[0]) != NULL) // check the null address if the c port is array or others
								{
									outIQ_lv0_0_255_1[hls_map_index++].range(31, 0) = sc_bv<32>(outIQ_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: outIQ(31, 0)
						{
							// carray: (0) => (255) @ (1)
							for (int i_0 = 0; i_0 <= 255; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : outIQ[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : outIQ[0]
								// output_left_conversion : outIQ[i_0]
								// output_type_conversion : (outIQ_lv0_0_255_1[hls_map_index++]).to_uint64()
								if (&(outIQ[0]) != NULL) // check the null address if the c port is array or others
								{
									outIQ[i_0] = (outIQ_lv0_0_255_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] outIQ_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "cycle"
		char* tvin_cycle = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_cycle);

		// "amp"
		char* tvin_amp = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_amp);

		// "binOffset"
		char* tvin_binOffset = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_binOffset);

		// "outIQ"
		char* tvout_outIQ = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_outIQ);

		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_cycle, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_cycle, tvin_cycle);

		sc_bv<32> cycle_tvin_wrapc_buffer;

		// RTL Name: cycle
		{
			// bitslice(31, 0)
			{
				// celement: cycle(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : cycle
						// sub_1st_elem          : 
						// ori_name_1st_elem     : cycle
						// regulate_c_name       : cycle
						// input_type_conversion : cycle
						if (&(cycle) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> cycle_tmp_mem;
							cycle_tmp_mem = cycle;
							cycle_tvin_wrapc_buffer.range(31, 0) = cycle_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_cycle, "%s\n", (cycle_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_cycle, tvin_cycle);
		}

		tcl_file.set_num(1, &tcl_file.cycle_depth);
		sprintf(tvin_cycle, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_cycle, tvin_cycle);

		// [[transaction]]
		sprintf(tvin_amp, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_amp, tvin_amp);

		sc_bv<32> amp_tvin_wrapc_buffer;

		// RTL Name: amp
		{
			// bitslice(31, 0)
			{
				// celement: amp(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : amp
						// sub_1st_elem          : 
						// ori_name_1st_elem     : amp
						// regulate_c_name       : amp
						// input_type_conversion : amp
						if (&(amp) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> amp_tmp_mem;
							amp_tmp_mem = amp;
							amp_tvin_wrapc_buffer.range(31, 0) = amp_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_amp, "%s\n", (amp_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_amp, tvin_amp);
		}

		tcl_file.set_num(1, &tcl_file.amp_depth);
		sprintf(tvin_amp, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_amp, tvin_amp);

		// [[transaction]]
		sprintf(tvin_binOffset, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_binOffset, tvin_binOffset);

		sc_bv<32> binOffset_tvin_wrapc_buffer;

		// RTL Name: binOffset
		{
			// bitslice(31, 0)
			{
				// celement: binOffset(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : binOffset
						// sub_1st_elem          : 
						// ori_name_1st_elem     : binOffset
						// regulate_c_name       : binOffset
						// input_type_conversion : binOffset
						if (&(binOffset) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> binOffset_tmp_mem;
							binOffset_tmp_mem = binOffset;
							binOffset_tvin_wrapc_buffer.range(31, 0) = binOffset_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_binOffset, "%s\n", (binOffset_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_binOffset, tvin_binOffset);
		}

		tcl_file.set_num(1, &tcl_file.binOffset_depth);
		sprintf(tvin_binOffset, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_binOffset, tvin_binOffset);

// [call_c_dut] ---------->

		AESL_ORIG_DUT_sinGen(Fs, cycle, amp, binOffset, outIQ);


		// [[transaction]]
		sprintf(tvout_outIQ, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_outIQ, tvout_outIQ);

		sc_bv<32>* outIQ_tvout_wrapc_buffer = new sc_bv<32>[256];

		// RTL Name: outIQ
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: outIQ(31, 0)
				{
					// carray: (0) => (255) @ (1)
					for (int i_0 = 0; i_0 <= 255; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : outIQ[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : outIQ[0]
						// regulate_c_name       : outIQ
						// input_type_conversion : outIQ[i_0]
						if (&(outIQ[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> outIQ_tmp_mem;
							outIQ_tmp_mem = outIQ[i_0];
							outIQ_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = outIQ_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 256; i++)
		{
			sprintf(tvout_outIQ, "%s\n", (outIQ_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_outIQ, tvout_outIQ);
		}

		tcl_file.set_num(256, &tcl_file.outIQ_depth);
		sprintf(tvout_outIQ, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_outIQ, tvout_outIQ);

		// release memory allocation
		delete [] outIQ_tvout_wrapc_buffer;

		// release memory allocation: "cycle"
		delete [] tvin_cycle;
		// release memory allocation: "amp"
		delete [] tvin_amp;
		// release memory allocation: "binOffset"
		delete [] tvin_binOffset;
		// release memory allocation: "outIQ"
		delete [] tvout_outIQ;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

