// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XSINGEN_H
#define XSINGEN_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xsingen_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Crtls_BaseAddress;
} XSingen_Config;
#endif

typedef struct {
    u32 Crtls_BaseAddress;
    u32 IsReady;
} XSingen;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XSingen_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XSingen_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XSingen_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XSingen_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XSingen_Initialize(XSingen *InstancePtr, u16 DeviceId);
XSingen_Config* XSingen_LookupConfig(u16 DeviceId);
int XSingen_CfgInitialize(XSingen *InstancePtr, XSingen_Config *ConfigPtr);
#else
int XSingen_Initialize(XSingen *InstancePtr, const char* InstanceName);
int XSingen_Release(XSingen *InstancePtr);
#endif

void XSingen_Start(XSingen *InstancePtr);
u32 XSingen_IsDone(XSingen *InstancePtr);
u32 XSingen_IsIdle(XSingen *InstancePtr);
u32 XSingen_IsReady(XSingen *InstancePtr);
void XSingen_EnableAutoRestart(XSingen *InstancePtr);
void XSingen_DisableAutoRestart(XSingen *InstancePtr);

void XSingen_Set_Fs(XSingen *InstancePtr, u32 Data);
u32 XSingen_Get_Fs(XSingen *InstancePtr);
void XSingen_Set_cycle(XSingen *InstancePtr, u32 Data);
u32 XSingen_Get_cycle(XSingen *InstancePtr);
void XSingen_Set_amp(XSingen *InstancePtr, u32 Data);
u32 XSingen_Get_amp(XSingen *InstancePtr);
void XSingen_Set_binOffset(XSingen *InstancePtr, u32 Data);
u32 XSingen_Get_binOffset(XSingen *InstancePtr);
u32 XSingen_Get_outIQ_BaseAddress(XSingen *InstancePtr);
u32 XSingen_Get_outIQ_HighAddress(XSingen *InstancePtr);
u32 XSingen_Get_outIQ_TotalBytes(XSingen *InstancePtr);
u32 XSingen_Get_outIQ_BitWidth(XSingen *InstancePtr);
u32 XSingen_Get_outIQ_Depth(XSingen *InstancePtr);
u32 XSingen_Write_outIQ_Words(XSingen *InstancePtr, int offset, int *data, int length);
u32 XSingen_Read_outIQ_Words(XSingen *InstancePtr, int offset, int *data, int length);
u32 XSingen_Write_outIQ_Bytes(XSingen *InstancePtr, int offset, char *data, int length);
u32 XSingen_Read_outIQ_Bytes(XSingen *InstancePtr, int offset, char *data, int length);

void XSingen_InterruptGlobalEnable(XSingen *InstancePtr);
void XSingen_InterruptGlobalDisable(XSingen *InstancePtr);
void XSingen_InterruptEnable(XSingen *InstancePtr, u32 Mask);
void XSingen_InterruptDisable(XSingen *InstancePtr, u32 Mask);
void XSingen_InterruptClear(XSingen *InstancePtr, u32 Mask);
u32 XSingen_InterruptGetEnabled(XSingen *InstancePtr);
u32 XSingen_InterruptGetStatus(XSingen *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
