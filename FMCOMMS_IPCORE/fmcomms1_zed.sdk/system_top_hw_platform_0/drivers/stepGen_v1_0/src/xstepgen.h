// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XSTEPGEN_H
#define XSTEPGEN_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xstepgen_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
    u32 Crtl_bus_BaseAddress;
} XStepgen_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 Crtl_bus_BaseAddress;
    u32 IsReady;
} XStepgen;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XStepgen_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XStepgen_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XStepgen_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XStepgen_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XStepgen_Initialize(XStepgen *InstancePtr, u16 DeviceId);
XStepgen_Config* XStepgen_LookupConfig(u16 DeviceId);
int XStepgen_CfgInitialize(XStepgen *InstancePtr, XStepgen_Config *ConfigPtr);
#else
int XStepgen_Initialize(XStepgen *InstancePtr, const char* InstanceName);
int XStepgen_Release(XStepgen *InstancePtr);
#endif

void XStepgen_Start(XStepgen *InstancePtr);
u32 XStepgen_IsDone(XStepgen *InstancePtr);
u32 XStepgen_IsIdle(XStepgen *InstancePtr);
u32 XStepgen_IsReady(XStepgen *InstancePtr);
void XStepgen_EnableAutoRestart(XStepgen *InstancePtr);
void XStepgen_DisableAutoRestart(XStepgen *InstancePtr);

u32 XStepgen_Get_out_vec_BaseAddress(XStepgen *InstancePtr);
u32 XStepgen_Get_out_vec_HighAddress(XStepgen *InstancePtr);
u32 XStepgen_Get_out_vec_TotalBytes(XStepgen *InstancePtr);
u32 XStepgen_Get_out_vec_BitWidth(XStepgen *InstancePtr);
u32 XStepgen_Get_out_vec_Depth(XStepgen *InstancePtr);
u32 XStepgen_Write_out_vec_Words(XStepgen *InstancePtr, int offset, int *data, int length);
u32 XStepgen_Read_out_vec_Words(XStepgen *InstancePtr, int offset, int *data, int length);
u32 XStepgen_Write_out_vec_Bytes(XStepgen *InstancePtr, int offset, char *data, int length);
u32 XStepgen_Read_out_vec_Bytes(XStepgen *InstancePtr, int offset, char *data, int length);

void XStepgen_InterruptGlobalEnable(XStepgen *InstancePtr);
void XStepgen_InterruptGlobalDisable(XStepgen *InstancePtr);
void XStepgen_InterruptEnable(XStepgen *InstancePtr, u32 Mask);
void XStepgen_InterruptDisable(XStepgen *InstancePtr, u32 Mask);
void XStepgen_InterruptClear(XStepgen *InstancePtr, u32 Mask);
u32 XStepgen_InterruptGetEnabled(XStepgen *InstancePtr);
u32 XStepgen_InterruptGetStatus(XStepgen *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
