// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "stepGen.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic stepGen::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic stepGen::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> stepGen::ap_ST_st1_fsm_0 = "1";
const sc_lv<2> stepGen::ap_ST_st2_fsm_1 = "10";
const sc_lv<32> stepGen::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> stepGen::ap_const_lv1_1 = "1";
const int stepGen::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> stepGen::ap_const_lv32_1 = "1";
const sc_lv<9> stepGen::ap_const_lv9_0 = "000000000";
const sc_lv<1> stepGen::ap_const_lv1_0 = "0";
const sc_lv<9> stepGen::ap_const_lv9_100 = "100000000";
const sc_lv<9> stepGen::ap_const_lv9_1 = "1";
const sc_lv<32> stepGen::ap_const_lv32_6000 = "110000000000000";
const sc_lv<32> stepGen::ap_const_lv32_A000 = "1010000000000000";

stepGen::stepGen(sc_module_name name) : sc_module(name), mVcdFile(0) {
    stepGen_AXILiteS_s_axi_U = new stepGen_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("stepGen_AXILiteS_s_axi_U");
    stepGen_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    stepGen_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    stepGen_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    stepGen_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    stepGen_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    stepGen_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    stepGen_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    stepGen_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    stepGen_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    stepGen_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    stepGen_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    stepGen_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    stepGen_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    stepGen_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    stepGen_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    stepGen_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    stepGen_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    stepGen_AXILiteS_s_axi_U->ACLK(ap_clk);
    stepGen_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    stepGen_AXILiteS_s_axi_U->ACLK_EN(stepGen_AXILiteS_s_axi_U_ap_dummy_ce);
    stepGen_AXILiteS_s_axi_U->out_vec_address0(out_vec_address0);
    stepGen_AXILiteS_s_axi_U->out_vec_ce0(out_vec_ce0);
    stepGen_AXILiteS_s_axi_U->out_vec_we0(out_vec_we0);
    stepGen_AXILiteS_s_axi_U->out_vec_d0(out_vec_d0);
    stepGen_CRTL_BUS_s_axi_U = new stepGen_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>("stepGen_CRTL_BUS_s_axi_U");
    stepGen_CRTL_BUS_s_axi_U->AWVALID(s_axi_CRTL_BUS_AWVALID);
    stepGen_CRTL_BUS_s_axi_U->AWREADY(s_axi_CRTL_BUS_AWREADY);
    stepGen_CRTL_BUS_s_axi_U->AWADDR(s_axi_CRTL_BUS_AWADDR);
    stepGen_CRTL_BUS_s_axi_U->WVALID(s_axi_CRTL_BUS_WVALID);
    stepGen_CRTL_BUS_s_axi_U->WREADY(s_axi_CRTL_BUS_WREADY);
    stepGen_CRTL_BUS_s_axi_U->WDATA(s_axi_CRTL_BUS_WDATA);
    stepGen_CRTL_BUS_s_axi_U->WSTRB(s_axi_CRTL_BUS_WSTRB);
    stepGen_CRTL_BUS_s_axi_U->ARVALID(s_axi_CRTL_BUS_ARVALID);
    stepGen_CRTL_BUS_s_axi_U->ARREADY(s_axi_CRTL_BUS_ARREADY);
    stepGen_CRTL_BUS_s_axi_U->ARADDR(s_axi_CRTL_BUS_ARADDR);
    stepGen_CRTL_BUS_s_axi_U->RVALID(s_axi_CRTL_BUS_RVALID);
    stepGen_CRTL_BUS_s_axi_U->RREADY(s_axi_CRTL_BUS_RREADY);
    stepGen_CRTL_BUS_s_axi_U->RDATA(s_axi_CRTL_BUS_RDATA);
    stepGen_CRTL_BUS_s_axi_U->RRESP(s_axi_CRTL_BUS_RRESP);
    stepGen_CRTL_BUS_s_axi_U->BVALID(s_axi_CRTL_BUS_BVALID);
    stepGen_CRTL_BUS_s_axi_U->BREADY(s_axi_CRTL_BUS_BREADY);
    stepGen_CRTL_BUS_s_axi_U->BRESP(s_axi_CRTL_BUS_BRESP);
    stepGen_CRTL_BUS_s_axi_U->ACLK(ap_clk);
    stepGen_CRTL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    stepGen_CRTL_BUS_s_axi_U->ACLK_EN(stepGen_CRTL_BUS_s_axi_U_ap_dummy_ce);
    stepGen_CRTL_BUS_s_axi_U->ap_start(ap_start);
    stepGen_CRTL_BUS_s_axi_U->interrupt(interrupt);
    stepGen_CRTL_BUS_s_axi_U->ap_ready(ap_ready);
    stepGen_CRTL_BUS_s_axi_U->ap_done(ap_done);
    stepGen_CRTL_BUS_s_axi_U->ap_idle(ap_idle);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_69_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_69_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_106);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_20 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_106 );

    SC_METHOD(thread_exitcond_fu_69_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( idx_reg_58 );

    SC_METHOD(thread_idx_1_fu_75_p2);
    sensitive << ( idx_reg_58 );

    SC_METHOD(thread_out_vec_address0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_4_fu_89_p1 );

    SC_METHOD(thread_out_vec_ce0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_out_vec_d0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_81_p3 );

    SC_METHOD(thread_out_vec_we0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_69_p2 );

    SC_METHOD(thread_stepGen_AXILiteS_s_axi_U_ap_dummy_ce);

    SC_METHOD(thread_stepGen_CRTL_BUS_s_axi_U_ap_dummy_ce);

    SC_METHOD(thread_tmp_4_fu_89_p1);
    sensitive << ( idx_reg_58 );

    SC_METHOD(thread_tmp_fu_81_p3);
    sensitive << ( idx_reg_58 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_69_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "stepGen_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWVALID, "(port)s_axi_CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWREADY, "(port)s_axi_CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWADDR, "(port)s_axi_CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WVALID, "(port)s_axi_CRTL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WREADY, "(port)s_axi_CRTL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WDATA, "(port)s_axi_CRTL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WSTRB, "(port)s_axi_CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARVALID, "(port)s_axi_CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARREADY, "(port)s_axi_CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARADDR, "(port)s_axi_CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RVALID, "(port)s_axi_CRTL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RREADY, "(port)s_axi_CRTL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RDATA, "(port)s_axi_CRTL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RRESP, "(port)s_axi_CRTL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BVALID, "(port)s_axi_CRTL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BREADY, "(port)s_axi_CRTL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BRESP, "(port)s_axi_CRTL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_20, "ap_sig_bdd_20");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, out_vec_address0, "out_vec_address0");
    sc_trace(mVcdFile, out_vec_ce0, "out_vec_ce0");
    sc_trace(mVcdFile, out_vec_we0, "out_vec_we0");
    sc_trace(mVcdFile, out_vec_d0, "out_vec_d0");
    sc_trace(mVcdFile, stepGen_AXILiteS_s_axi_U_ap_dummy_ce, "stepGen_AXILiteS_s_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, stepGen_CRTL_BUS_s_axi_U_ap_dummy_ce, "stepGen_CRTL_BUS_s_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, idx_1_fu_75_p2, "idx_1_fu_75_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_106, "ap_sig_bdd_106");
    sc_trace(mVcdFile, idx_reg_58, "idx_reg_58");
    sc_trace(mVcdFile, exitcond_fu_69_p2, "exitcond_fu_69_p2");
    sc_trace(mVcdFile, tmp_4_fu_89_p1, "tmp_4_fu_89_p1");
    sc_trace(mVcdFile, tmp_fu_81_p3, "tmp_fu_81_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("stepGen.hdltvin.dat");
    mHdltvoutHandle.open("stepGen.hdltvout.dat");
}

stepGen::~stepGen() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete stepGen_AXILiteS_s_axi_U;
    delete stepGen_CRTL_BUS_s_axi_U;
}

void stepGen::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_69_p2.read(), ap_const_lv1_0))) {
        idx_reg_58 = idx_1_fu_75_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        idx_reg_58 = ap_const_lv9_0;
    }
}

void stepGen::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_69_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void stepGen::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void stepGen::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_69_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void stepGen::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void stepGen::thread_ap_sig_bdd_106() {
    ap_sig_bdd_106 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void stepGen::thread_ap_sig_bdd_20() {
    ap_sig_bdd_20 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void stepGen::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_20.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void stepGen::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_106.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void stepGen::thread_exitcond_fu_69_p2() {
    exitcond_fu_69_p2 = (!idx_reg_58.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(idx_reg_58.read() == ap_const_lv9_100);
}

void stepGen::thread_idx_1_fu_75_p2() {
    idx_1_fu_75_p2 = (!ap_const_lv9_1.is_01() || !idx_reg_58.read().is_01())? sc_lv<9>(): (sc_biguint<9>(ap_const_lv9_1) + sc_biguint<9>(idx_reg_58.read()));
}

void stepGen::thread_out_vec_address0() {
    out_vec_address0 =  (sc_lv<8>) (tmp_4_fu_89_p1.read());
}

void stepGen::thread_out_vec_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        out_vec_ce0 = ap_const_logic_1;
    } else {
        out_vec_ce0 = ap_const_logic_0;
    }
}

void stepGen::thread_out_vec_d0() {
    out_vec_d0 = (!tmp_fu_81_p3.read()[0].is_01())? sc_lv<32>(): ((tmp_fu_81_p3.read()[0].to_bool())? ap_const_lv32_6000: ap_const_lv32_A000);
}

void stepGen::thread_out_vec_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_69_p2.read(), ap_const_lv1_0)))) {
        out_vec_we0 = ap_const_logic_1;
    } else {
        out_vec_we0 = ap_const_logic_0;
    }
}

void stepGen::thread_stepGen_AXILiteS_s_axi_U_ap_dummy_ce() {
    stepGen_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void stepGen::thread_stepGen_CRTL_BUS_s_axi_U_ap_dummy_ce() {
    stepGen_CRTL_BUS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void stepGen::thread_tmp_4_fu_89_p1() {
    tmp_4_fu_89_p1 = esl_zext<64,9>(idx_reg_58.read());
}

void stepGen::thread_tmp_fu_81_p3() {
    tmp_fu_81_p3 = idx_reg_58.read().range(1, 1);
}

void stepGen::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_69_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void stepGen::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWVALID\" :  \"" << s_axi_CRTL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_AWREADY\" :  \"" << s_axi_CRTL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWADDR\" :  \"" << s_axi_CRTL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WVALID\" :  \"" << s_axi_CRTL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_WREADY\" :  \"" << s_axi_CRTL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WDATA\" :  \"" << s_axi_CRTL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WSTRB\" :  \"" << s_axi_CRTL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARVALID\" :  \"" << s_axi_CRTL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_ARREADY\" :  \"" << s_axi_CRTL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARADDR\" :  \"" << s_axi_CRTL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RVALID\" :  \"" << s_axi_CRTL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_RREADY\" :  \"" << s_axi_CRTL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RDATA\" :  \"" << s_axi_CRTL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RRESP\" :  \"" << s_axi_CRTL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BVALID\" :  \"" << s_axi_CRTL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_BREADY\" :  \"" << s_axi_CRTL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BRESP\" :  \"" << s_axi_CRTL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

