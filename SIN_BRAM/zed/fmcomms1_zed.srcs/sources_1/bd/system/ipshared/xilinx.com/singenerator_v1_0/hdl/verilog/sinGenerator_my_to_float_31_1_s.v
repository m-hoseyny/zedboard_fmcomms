// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sinGenerator_my_to_float_31_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V,
        prescale,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_st3_fsm_2 = 4'b100;
parameter    ap_ST_st4_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] in_V;
input  [8:0] prescale;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm = 4'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
wire   [31:0] out_bits_0_V_fu_186_p5;
reg   [31:0] out_bits_0_V_reg_424;
wire   [31:0] p_Result_s_fu_210_p5;
reg   [31:0] p_Result_s_reg_429;
wire   [1:0] i_fu_228_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_48;
wire   [31:0] c_1_1_fu_252_p3;
wire   [0:0] exitcond_fu_222_p2;
wire   [31:0] c_1_2_fu_260_p3;
wire   [0:0] tmp_25_fu_268_p3;
reg   [0:0] tmp_25_reg_452;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_65;
wire   [1:0] i_1_fu_276_p2;
reg   [1:0] i_1_reg_456;
wire   [31:0] sh_assign_fu_286_p3;
reg   [31:0] sh_assign_reg_461;
wire   [0:0] isNeg_fu_294_p3;
reg   [0:0] isNeg_reg_467;
wire   [31:0] sh_assign_1_fu_308_p3;
reg   [31:0] sh_assign_1_reg_472;
wire   [31:0] shift_2_fu_316_p2;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_84;
wire   [30:0] in_shift_V_fu_344_p3;
reg   [31:0] c_0_s_reg_80;
reg   [31:0] c_1_s_reg_92;
reg   [1:0] i1_reg_104;
reg   [30:0] in_shift_reg_115;
wire   [0:0] tmp_21_fu_352_p2;
reg   [31:0] shift_reg_125;
reg   [1:0] i2_reg_137;
reg   [30:0] p_Val2_in_phi_fu_151_p4;
reg   [30:0] p_Val2_in_reg_148;
reg   [31:0] shift_1_phi_fu_161_p4;
reg   [31:0] shift_1_reg_158;
wire   [15:0] p_Result_2_fu_168_p4;
wire   [16:0] tmp_fu_178_p3;
wire   [14:0] tmp_24_fu_198_p1;
wire   [15:0] tmp_8_fu_202_p3;
wire   [0:0] tmp_26_fu_234_p1;
wire   [31:0] out_bits_V_load_phi_fu_238_p3;
reg   [31:0] c_0_fu_244_p3;
wire   [0:0] tmp_27_fu_282_p1;
wire   [31:0] tmp_s_fu_302_p2;
wire  signed [31:0] tmp_18_fu_322_p1;
wire   [31:0] tmp_19_fu_326_p2;
wire   [31:0] tmp_20_fu_331_p2;
wire   [30:0] tmp_29_fu_336_p1;
wire   [30:0] tmp_30_fu_340_p1;
wire   [7:0] tmp_32_fu_372_p1;
wire   [7:0] tmp_11_fu_375_p2;
wire   [7:0] tmp_33_fu_381_p1;
wire   [0:0] tmp_22_fu_367_p2;
wire   [7:0] phitmp_fu_385_p2;
wire   [7:0] out_exp_V_fu_391_p3;
wire   [22:0] p_Val2_s_fu_357_p4;
wire   [31:0] p_Result_23_fu_399_p4;
wire   [31:0] result_write_assign_fu_409_p1;
reg   [31:0] ap_return_preg = 32'b00000000000000000000000000000000;
reg   [3:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg[0] <= 1'b0;
        ap_return_preg[1] <= 1'b0;
        ap_return_preg[2] <= 1'b0;
        ap_return_preg[3] <= 1'b0;
        ap_return_preg[4] <= 1'b0;
        ap_return_preg[5] <= 1'b0;
        ap_return_preg[6] <= 1'b0;
        ap_return_preg[7] <= 1'b0;
        ap_return_preg[8] <= 1'b0;
        ap_return_preg[9] <= 1'b0;
        ap_return_preg[10] <= 1'b0;
        ap_return_preg[11] <= 1'b0;
        ap_return_preg[12] <= 1'b0;
        ap_return_preg[13] <= 1'b0;
        ap_return_preg[14] <= 1'b0;
        ap_return_preg[15] <= 1'b0;
        ap_return_preg[16] <= 1'b0;
        ap_return_preg[17] <= 1'b0;
        ap_return_preg[18] <= 1'b0;
        ap_return_preg[19] <= 1'b0;
        ap_return_preg[20] <= 1'b0;
        ap_return_preg[21] <= 1'b0;
        ap_return_preg[22] <= 1'b0;
        ap_return_preg[23] <= 1'b0;
        ap_return_preg[24] <= 1'b0;
        ap_return_preg[25] <= 1'b0;
        ap_return_preg[26] <= 1'b0;
        ap_return_preg[27] <= 1'b0;
        ap_return_preg[28] <= 1'b0;
        ap_return_preg[29] <= 1'b0;
        ap_return_preg[30] <= 1'b0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ((ap_const_lv1_0 == tmp_21_fu_352_p2) | ~(ap_const_lv1_0 == tmp_25_reg_452)))) begin
                        ap_return_preg[30 : 0] <= result_write_assign_fu_409_p1[30 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_222_p2 == ap_const_lv1_0))) begin
        i1_reg_104 <= i_fu_228_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i1_reg_104 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_222_p2 == ap_const_lv1_0))) begin
        i2_reg_137 <= ap_const_lv2_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_25_reg_452) & ~(ap_const_lv1_0 == tmp_21_fu_352_p2))) begin
        i2_reg_137 <= i_1_reg_456;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_222_p2 == ap_const_lv1_0))) begin
        in_shift_reg_115 <= in_V;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_25_reg_452) & ~(ap_const_lv1_0 == tmp_21_fu_352_p2))) begin
        in_shift_reg_115 <= in_shift_V_fu_344_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_25_reg_452) & (ap_const_lv1_0 == tmp_21_fu_352_p2))) begin
        p_Val2_in_reg_148 <= in_shift_V_fu_344_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_25_fu_268_p3))) begin
        p_Val2_in_reg_148 <= in_shift_reg_115;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_25_reg_452) & (ap_const_lv1_0 == tmp_21_fu_352_p2))) begin
        shift_1_reg_158 <= shift_2_fu_316_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_25_fu_268_p3))) begin
        shift_1_reg_158 <= shift_reg_125;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_222_p2 == ap_const_lv1_0))) begin
        shift_reg_125 <= ap_const_lv32_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_25_reg_452) & ~(ap_const_lv1_0 == tmp_21_fu_352_p2))) begin
        shift_reg_125 <= shift_2_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_222_p2 == ap_const_lv1_0))) begin
        c_0_s_reg_80 <= c_1_1_fu_252_p3;
        c_1_s_reg_92 <= c_1_2_fu_260_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_1_reg_456 <= i_1_fu_276_p2;
        tmp_25_reg_452 <= i2_reg_137[ap_const_lv32_1];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == tmp_25_fu_268_p3))) begin
        isNeg_reg_467 <= sh_assign_fu_286_p3[ap_const_lv32_1F];
        sh_assign_1_reg_472 <= sh_assign_1_fu_308_p3;
        sh_assign_reg_461 <= sh_assign_fu_286_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        out_bits_0_V_reg_424 <= out_bits_0_V_fu_186_p5;
        p_Result_s_reg_429 <= p_Result_s_fu_210_p5;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or tmp_25_reg_452 or ap_sig_cseq_ST_st4_fsm_3 or tmp_21_fu_352_p2) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ((ap_const_lv1_0 == tmp_21_fu_352_p2) | ~(ap_const_lv1_0 == tmp_25_reg_452))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (tmp_25_reg_452 or ap_sig_cseq_ST_st4_fsm_3 or tmp_21_fu_352_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ((ap_const_lv1_0 == tmp_21_fu_352_p2) | ~(ap_const_lv1_0 == tmp_25_reg_452)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (tmp_25_reg_452 or ap_sig_cseq_ST_st4_fsm_3 or tmp_21_fu_352_p2 or result_write_assign_fu_409_p1 or ap_return_preg) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ((ap_const_lv1_0 == tmp_21_fu_352_p2) | ~(ap_const_lv1_0 == tmp_25_reg_452)))) begin
        ap_return = result_write_assign_fu_409_p1;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (ap_sig_bdd_22) begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_48) begin
    if (ap_sig_bdd_48) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_65) begin
    if (ap_sig_bdd_65) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_84) begin
    if (ap_sig_bdd_84) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (tmp_25_reg_452 or ap_sig_cseq_ST_st4_fsm_3 or in_shift_V_fu_344_p3 or tmp_21_fu_352_p2 or p_Val2_in_reg_148) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_25_reg_452) & (ap_const_lv1_0 == tmp_21_fu_352_p2))) begin
        p_Val2_in_phi_fu_151_p4 = in_shift_V_fu_344_p3;
    end else begin
        p_Val2_in_phi_fu_151_p4 = p_Val2_in_reg_148;
    end
end

always @ (tmp_25_reg_452 or shift_2_fu_316_p2 or ap_sig_cseq_ST_st4_fsm_3 or tmp_21_fu_352_p2 or shift_1_reg_158) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_25_reg_452) & (ap_const_lv1_0 == tmp_21_fu_352_p2))) begin
        shift_1_phi_fu_161_p4 = shift_2_fu_316_p2;
    end else begin
        shift_1_phi_fu_161_p4 = shift_1_reg_158;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_fu_222_p2 or tmp_25_reg_452 or tmp_21_fu_352_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((exitcond_fu_222_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (((ap_const_lv1_0 == tmp_21_fu_352_p2) | ~(ap_const_lv1_0 == tmp_25_reg_452))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_CS_fsm) begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_48 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_65 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_84 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (out_bits_V_load_phi_fu_238_p3) begin
    if (out_bits_V_load_phi_fu_238_p3[31] == 1'b1) begin
        c_0_fu_244_p3 = 32'd0;
    end else if (out_bits_V_load_phi_fu_238_p3[30] == 1'b1) begin
        c_0_fu_244_p3 = 32'd1;
    end else if (out_bits_V_load_phi_fu_238_p3[29] == 1'b1) begin
        c_0_fu_244_p3 = 32'd2;
    end else if (out_bits_V_load_phi_fu_238_p3[28] == 1'b1) begin
        c_0_fu_244_p3 = 32'd3;
    end else if (out_bits_V_load_phi_fu_238_p3[27] == 1'b1) begin
        c_0_fu_244_p3 = 32'd4;
    end else if (out_bits_V_load_phi_fu_238_p3[26] == 1'b1) begin
        c_0_fu_244_p3 = 32'd5;
    end else if (out_bits_V_load_phi_fu_238_p3[25] == 1'b1) begin
        c_0_fu_244_p3 = 32'd6;
    end else if (out_bits_V_load_phi_fu_238_p3[24] == 1'b1) begin
        c_0_fu_244_p3 = 32'd7;
    end else if (out_bits_V_load_phi_fu_238_p3[23] == 1'b1) begin
        c_0_fu_244_p3 = 32'd8;
    end else if (out_bits_V_load_phi_fu_238_p3[22] == 1'b1) begin
        c_0_fu_244_p3 = 32'd9;
    end else if (out_bits_V_load_phi_fu_238_p3[21] == 1'b1) begin
        c_0_fu_244_p3 = 32'd10;
    end else if (out_bits_V_load_phi_fu_238_p3[20] == 1'b1) begin
        c_0_fu_244_p3 = 32'd11;
    end else if (out_bits_V_load_phi_fu_238_p3[19] == 1'b1) begin
        c_0_fu_244_p3 = 32'd12;
    end else if (out_bits_V_load_phi_fu_238_p3[18] == 1'b1) begin
        c_0_fu_244_p3 = 32'd13;
    end else if (out_bits_V_load_phi_fu_238_p3[17] == 1'b1) begin
        c_0_fu_244_p3 = 32'd14;
    end else if (out_bits_V_load_phi_fu_238_p3[16] == 1'b1) begin
        c_0_fu_244_p3 = 32'd15;
    end else if (out_bits_V_load_phi_fu_238_p3[15] == 1'b1) begin
        c_0_fu_244_p3 = 32'd16;
    end else if (out_bits_V_load_phi_fu_238_p3[14] == 1'b1) begin
        c_0_fu_244_p3 = 32'd17;
    end else if (out_bits_V_load_phi_fu_238_p3[13] == 1'b1) begin
        c_0_fu_244_p3 = 32'd18;
    end else if (out_bits_V_load_phi_fu_238_p3[12] == 1'b1) begin
        c_0_fu_244_p3 = 32'd19;
    end else if (out_bits_V_load_phi_fu_238_p3[11] == 1'b1) begin
        c_0_fu_244_p3 = 32'd20;
    end else if (out_bits_V_load_phi_fu_238_p3[10] == 1'b1) begin
        c_0_fu_244_p3 = 32'd21;
    end else if (out_bits_V_load_phi_fu_238_p3[9] == 1'b1) begin
        c_0_fu_244_p3 = 32'd22;
    end else if (out_bits_V_load_phi_fu_238_p3[8] == 1'b1) begin
        c_0_fu_244_p3 = 32'd23;
    end else if (out_bits_V_load_phi_fu_238_p3[7] == 1'b1) begin
        c_0_fu_244_p3 = 32'd24;
    end else if (out_bits_V_load_phi_fu_238_p3[6] == 1'b1) begin
        c_0_fu_244_p3 = 32'd25;
    end else if (out_bits_V_load_phi_fu_238_p3[5] == 1'b1) begin
        c_0_fu_244_p3 = 32'd26;
    end else if (out_bits_V_load_phi_fu_238_p3[4] == 1'b1) begin
        c_0_fu_244_p3 = 32'd27;
    end else if (out_bits_V_load_phi_fu_238_p3[3] == 1'b1) begin
        c_0_fu_244_p3 = 32'd28;
    end else if (out_bits_V_load_phi_fu_238_p3[2] == 1'b1) begin
        c_0_fu_244_p3 = 32'd29;
    end else if (out_bits_V_load_phi_fu_238_p3[1] == 1'b1) begin
        c_0_fu_244_p3 = 32'd30;
    end else if (out_bits_V_load_phi_fu_238_p3[0] == 1'b1) begin
        c_0_fu_244_p3 = 32'd31;
    end else begin
        c_0_fu_244_p3 = 32'd32;
    end
end



assign c_1_1_fu_252_p3 = ((tmp_26_fu_234_p1[0:0] === 1'b1) ? c_0_s_reg_80 : c_0_fu_244_p3);

assign c_1_2_fu_260_p3 = ((tmp_26_fu_234_p1[0:0] === 1'b1) ? c_0_fu_244_p3 : c_1_s_reg_92);

assign exitcond_fu_222_p2 = (i1_reg_104 == ap_const_lv2_2? 1'b1: 1'b0);

assign i_1_fu_276_p2 = (i2_reg_137 + ap_const_lv2_1);

assign i_fu_228_p2 = (i1_reg_104 + ap_const_lv2_1);

assign in_shift_V_fu_344_p3 = ((isNeg_reg_467[0:0] === 1'b1) ? tmp_29_fu_336_p1 : tmp_30_fu_340_p1);

assign isNeg_fu_294_p3 = sh_assign_fu_286_p3[ap_const_lv32_1F];

assign out_bits_0_V_fu_186_p5 = {{tmp_fu_178_p3}, {ap_const_lv32_0[32'd14 : 32'd0]}};

assign out_bits_V_load_phi_fu_238_p3 = ((tmp_26_fu_234_p1[0:0] === 1'b1) ? p_Result_s_reg_429 : out_bits_0_V_reg_424);

assign out_exp_V_fu_391_p3 = ((tmp_22_fu_367_p2[0:0] === 1'b1) ? ap_const_lv8_0 : phitmp_fu_385_p2);

assign p_Result_23_fu_399_p4 = {{{{ap_const_lv1_0}, {out_exp_V_fu_391_p3}}}, {p_Val2_s_fu_357_p4}};

assign p_Result_2_fu_168_p4 = {{in_V[ap_const_lv32_1E : ap_const_lv32_F]}};

assign p_Result_s_fu_210_p5 = {{tmp_8_fu_202_p3}, {ap_const_lv32_0[32'd15 : 32'd0]}};

assign p_Val2_s_fu_357_p4 = {{p_Val2_in_phi_fu_151_p4[ap_const_lv32_1D : ap_const_lv32_7]}};

assign phitmp_fu_385_p2 = (tmp_11_fu_375_p2 - tmp_33_fu_381_p1);

assign result_write_assign_fu_409_p1 = p_Result_23_fu_399_p4;

assign sh_assign_1_fu_308_p3 = ((isNeg_fu_294_p3[0:0] === 1'b1) ? tmp_s_fu_302_p2 : sh_assign_fu_286_p3);

assign sh_assign_fu_286_p3 = ((tmp_27_fu_282_p1[0:0] === 1'b1) ? c_1_s_reg_92 : c_0_s_reg_80);

assign shift_2_fu_316_p2 = (shift_reg_125 + sh_assign_reg_461);

assign tmp_11_fu_375_p2 = (ap_const_lv8_7F - tmp_32_fu_372_p1);

assign tmp_18_fu_322_p1 = $signed(in_shift_reg_115);

assign tmp_19_fu_326_p2 = $signed(tmp_18_fu_322_p1) >>> sh_assign_1_reg_472;

assign tmp_20_fu_331_p2 = tmp_18_fu_322_p1 << sh_assign_1_reg_472;

assign tmp_21_fu_352_p2 = (sh_assign_reg_461 == ap_const_lv32_10? 1'b1: 1'b0);

assign tmp_22_fu_367_p2 = (in_V == ap_const_lv31_0? 1'b1: 1'b0);

assign tmp_24_fu_198_p1 = in_V[14:0];

assign tmp_25_fu_268_p3 = i2_reg_137[ap_const_lv32_1];

assign tmp_26_fu_234_p1 = i1_reg_104[0:0];

assign tmp_27_fu_282_p1 = i2_reg_137[0:0];

assign tmp_29_fu_336_p1 = tmp_19_fu_326_p2[30:0];

assign tmp_30_fu_340_p1 = tmp_20_fu_331_p2[30:0];

assign tmp_32_fu_372_p1 = prescale[7:0];

assign tmp_33_fu_381_p1 = shift_1_phi_fu_161_p4[7:0];

assign tmp_8_fu_202_p3 = {{tmp_24_fu_198_p1}, {ap_const_lv1_1}};

assign tmp_fu_178_p3 = {{p_Result_2_fu_168_p4}, {ap_const_lv1_1}};

assign tmp_s_fu_302_p2 = (ap_const_lv32_0 - sh_assign_fu_286_p3);
always @ (posedge ap_clk) begin
    ap_return_preg[31] <= 1'b0;
end



endmodule //sinGenerator_my_to_float_31_1_s

